{"Buffer":["\u003Cscript\u003E\n  import {onMount} from \u0027svelte\u0027;\n  let count = 0;\n  onMount(() =\u003E {\n    const interval = setInterval(() =\u003E count\u002B\u002B, 1000);\n    return () =\u003E {\n      clearInterval(interval);\n    };\n  });\n\u003C/script\u003E\n\n\u003Cstyle\u003E\n  :global(body) {\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n  .App {\n    text-align: center;\n  }\n  .App code {\n    background: #0002;\n    padding: 4px 8px;\n    border-radius: 4px;\n  }\n  .App p {\n    margin: 0.4rem;\n  }\n\n  .App-header {\n    background-color: #f9f6f6;\n    color: #333;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px \u002B 2vmin);\n  }\n  .App-link {\n    color: #ff3e00;\n  }\n  .App-logo {\n    height: 36vmin;\n    pointer-events: none;\n    margin-bottom: 3rem;\n    animation: App-logo-spin infinite 1.6s ease-in-out alternate;\n  }\n  @keyframes App-logo-spin {\n    from {\n      transform: scale(1);\n    }\n    to {\n      transform: scale(1.06);\n    }\n  }\n\u003C/style\u003E\n\n\u003Cdiv class=\u0022App\u0022\u003E\n  \u003Cheader class=\u0022App-header\u0022\u003E\n    \u003Cimg src=\u0022/logo.svg\u0022 class=\u0022App-logo\u0022 alt=\u0022logo\u0022 /\u003E\n    \u003Cp\u003EEdit \u003Ccode\u003Esrc/App.svelte\u003C/code\u003E and save to reload.\u003C/p\u003E\n    \u003Cp\u003EPage has been open for \u003Ccode\u003E{count}\u003C/code\u003E seconds.\u003C/p\u003E\n    \u003Cp\u003E\n      \u003Ca class=\u0022App-link\u0022 href=\u0022https://svelte.dev\u0022 target=\u0022_blank\u0022 rel=\u0022noopener noreferrer\u0022\u003E\n        Learn Svelte\n      \u003C/a\u003E\n    \u003C/p\u003E\n  \u003C/header\u003E\n\u003C/div\u003E\n lang=\u0022ts\u0022\u003Cscript\u003E\n\timport {onMount} from \u0027svelte\u0027;\n\tlet count: number = 0;\n\tonMount(() =\u003E {\n\t  const interval = setInterval(() =\u003E count\u002B\u002B, 1000);\n\t  return () =\u003E {\n\t\tclearInterval(interval);\n\t  };\n\t});\n  \u003C/script\u003E\n  \n  \u003Cstyle\u003E\n\t:global(body) {\n\t  margin: 0;\n\t  font-family: Arial, Helvetica, sans-serif;\n\t}\n\t.App {\n\t  text-align: center;\n\t}\n\t.App code {\n\t  background: #0002;\n\t  padding: 4px 8px;\n\t  border-radius: 4px;\n\t}\n\t.App p {\n\t  margin: 0.4rem;\n\t}\n  \n\t.App-header {\n\t  background-color: #f9f6f6;\n\t  color: #333;\n\t  min-height: 100vh;\n\t  display: flex;\n\t  flex-direction: column;\n\t  align-items: center;\n\t  justify-content: center;\n\t  font-size: calc(10px \u002B 2vmin);\n\t}\n\t.App-link {\n\t  color: #ff3e00;\n\t}\n\t.App-logo {\n\t  height: 36vmin;\n\t  pointer-events: none;\n\t  margin-bottom: 3rem;\n\t  animation: App-logo-spin infinite 1.6s ease-in-out alternate;\n\t}\n\t@keyframes App-logo-spin {\n\t  from {\n\t\ttransform: scale(1);\n\t  }\n\t  to {\n\t\ttransform: scale(1.06);\n\t  }\n\t}\n  \u003C/style\u003E\n  \n  \u003Cdiv class=\u0022App\u0022\u003E\n\t\u003Cheader class=\u0022App-header\u0022\u003E\n\t  \u003Cimg src=\u0022/logo.svg\u0022 class=\u0022App-logo\u0022 alt=\u0022logo\u0022 /\u003E\n\t  \u003Cp\u003EEdit \u003Ccode\u003Esrc/App.svelte\u003C/code\u003E and save to reload.\u003C/p\u003E\n\t  \u003Cp\u003EPage has been open for \u003Ccode\u003E{count}\u003C/code\u003E seconds.\u003C/p\u003E\n\t  \u003Cp\u003E\n\t\t\u003Ca class=\u0022App-link\u0022 href=\u0022https://svelte.dev\u0022 target=\u0022_blank\u0022 rel=\u0022noopener noreferrer\u0022\u003E\n\t\t  Learn Svelte\n\t\t\u003C/a\u003E\n\t  \u003C/p\u003E\n\t\u003C/header\u003E\n  \u003C/div\u003E\n    lang=\u0022ts\u0022\u003Cscript\u003E\n\texport let name;\n\u003C/script\u003E\n\n\u003Cmain\u003E\n\t\u003Ch1\u003EHello {name}!\u003C/h1\u003E\n\t\u003Cp\u003EVisit the \u003Ca href=\u0022https://svelte.dev/tutorial\u0022\u003ESvelte tutorial\u003C/a\u003E to learn how to build Svelte apps.\u003C/p\u003E\n\u003C/main\u003E\n\n\u003Cstyle\u003E\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n\u003C/style\u003E\n\t\texport let name;\nstate\u003Cp\u003E{JSONJSON.stringify\nimport { stringify } from \u0022querystring\u0022;\nstringify(state)}\u003C/p\u003Erere\n\texport let state;\n\texport let state;\n\texport let state;roomconnectedvalue// \texport let value\n\texport let value\n\texport let value\nplayersroundssecs_per_round\texport let secs_per_round\nond_active_sessions\n\t\u003Ch1\u003ERoom {room}\u003C/h1\u003E connected {connected}\n\texport let connectedstate\texport let connected\n state {state}connectionconnection *//* \n\t\n\t\tbod y {\n\t\t\n\t\t\t}\t\tbackground-color: black;\n\t\u003Ch1\u003EGlass Bead Games\u003C/h1\u003E Timer44hh:\u003Cem\u003E\u003C/em\u003E\n\t\u003Cspadiv\u003E connected {connection} state {state}\u003C/di\u003Ev\u003E/\n\t\n\t\u003Cdiv id=bar\u003Cdiv id=config\u0027\u0027\u003E\u003C/div\u003E\n\t\t\n\t\u003Ch2\u003EConfig\u003C/h2\u003E\n#config {\n\t\n\t}\tmmargin-top: 12em;\n\t\t\u003Cubutton on:clion:click=\u0022\u0022{}start\u003EStart\u003C//button\u003E\n\nconst start = () =\u003E {\n\t\n\t}\tconsoleconsole.loglog(\u0027start!\u0027)\n\t\n\tconst update_state=  = (patch) patch =\u003E {\n\t\n\t}\tfetch(async await await {\n\t\tmethd: method: \u0027POST\u0027,\n\t\tmdeode: \u0027sasame-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027,: \u0027application/json\u0027,\n\t\t\t\t\t},\n\t\tbdody: JSONJSON.stringifhystringify(patch)\n\t\t\t}\u0027/\u0060${room}/configure\u0060, )\n\tupdaupdate_state({state: \u0027playing\u0027}) = null\n\t\n\t\t{#ififif#iif }\n\t\t\t\n\t\t{/ifstate == \u0027waiting\u0027\n\t\t{/if\t}\n\t\t\t{#elelelse}\t\t#elif:else if state == \u0027playing\u0027\t\t\t\u003Cbutton on:click={start}\u003EStart\u003C/button\u003E\n\t\t\t{:else if state == \u0027playing\u0027}\n\t\t() =\u003E update_state({state: \u0027playing\u0027})// // // // update_state({state: \u0027playing\u0027})() =\u003E pausedPause\t\t{:else if state == \u0027playing\u0027}\n\t\t{:else if state == \u0027playing\u0027}\n\t\t\t\u003Cbutton on:click={() =\u003E update_state({state: \u0027paused\u0027})}\u003EPause\u003C/button\u003E\npausedresumeplayingResume\n\t\t\n\t\t\u003Clabel\u003ENumber of players\u003Cinput type=numb\u0027er\u0027\u003E\u003C/l/label\u003E\u003E\u003Cdiv\u003E\u003C/div\u003E\n\t\t\t\n\t\t\t\u003C/div\u003E\t\t valubind:on:inpon:input=\u0022\u0022\n\nconst patch = upd = (patch \u003E  =\u003E () =\u003E updateupdate_state(patch)uuupppddd{updupd((k\nimport { kMaxLength } from \u0022buffer\u0022\nkMaxLength, v)k, v){[k]: v}\u0027\u0027\u0027\u0027\u0027\u0027,,, on:input={}()\nconst config = k =\u003E (e)e =\u003E {\n\t\n\t}\tconsoleconsole.loglog(\u0027k\u0027, k, e)configconfig(\u0027playiners\u0027)\n\t\t\t\t\n\t\t\t.valuedata\n\tupdaupdate_state(k, {[k]: e.data}) value={players} --\u003E\u003C!-- \t\t\t\t\u003C!-- \u003Cinput type=\u0027number\u0027 value={players} on:input={config(\u0027players\u0027)}\u003E --\u003E\nrange moinin=1 max=12e, , e.dvaluesubmit --\u003E\u003C!--  min=1 max=12// submitblur\t\t\u003Cdiv\u003E\n\t\t\t\u003Clabel\u003ENumber of players\n\t\t\t\t\u003Cinput type=\u0027number\u0027 value={players} on:blur={config(\u0027players\u0027)} min=1 max=12\u003E\n\t\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\t\u003C/label\u003E\n\t\t\u003C/div\u003E\n\n\t\trroundsrroouunnddssiinnppuutt, e.target.valuetarget.value min=1 max=12, e.target.type\n\tconst value = e.target.type === \u0027number\u0027 ? e.target.value|0 : e.target.value\n\tconst raw\u002B_value = e.target.valuerraaww__vvaalluueevalue\n\t\n\t\u003Cdiv id=rounds\u003E\u0027\u0027\n\t\t\u003C/div\t\u003C/div\u003E\n\t\t{#f\n\ncontst rounds = new ArrayArray(let_arrrounds).fillfill().map.fillfill()each round_arr as _, i}\n\t\t\n\t\t{/eaeach}\t\t\t\u003Cdiv\u003ERound {i}\u003C/div\u003EMath.minaxmax(, 0)\n$::$$: round_round_arr\u002B1:\n\t\t\t\t\n\t\t\tArrayArray(rounds)// // Math.maxmax(, 0)\t\t\t\t{#each Array(Math.max(rounds, 0)) as _, i}players\n\t\t\t\t\u003C{/each\u003E}\n\t\t\t\t\t\u003Cspan\u003E\u003C/span\u003E{rrpp\u002B1}  \nlabel {\n\t\n\t}\tdisplay: block;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t\u003Clabel\u003ENumber of players\n\t\t\t\u003Cinput type=\u0027number\u0027 value={players} on:input={config(\u0027players\u0027)} min=1 max=12 \u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\t\tMeditate before game start1 minute maionscheckbox\u0027\u0027\n\texport let playersmeditatemeditatemeditate \n\t\t\n\t\t: e.target.type === \u0027checkbox\u0027 ? e.target.checked\n\t\t\u003Ch2\u003EGame structure\u003C/h2\u003E\n\t\t{if medimeditate}\n\t\t\t\u003Cdiv\u003EMeditation\u003C/div\u003E\n\t\t\t\u003C[{/if}\t\t#\n\t\n\t\u003Cdiv\u003E id=progress\u0027\u0027\u003C/dic\u003Ev\u003E\n\n#progress {\n\t\n\t}\twidth: 100%;\n\theight: 3em:;\n\tborder: 1px solid white;\n\tmargin: 10px;paddingcalc( - 20px)margin\n\tborder: 1px solid white;\n\theight: 3em;5254em52containerprogresscontainer\n\t\t\n\t\u003Cdiv id=\u0027progress\u0027\u003C/div\u003E\u003E style=\u0022{}{}width: 50%\u0027\u0027\n\n#progress {\n\t\n\t} *//* \twidth: borderbackground-color: white;\n\twidth: 50%;\n\tbackground-color: white;\n\theight: 100%; *//* :==\u0027: \nconst width = 50{width}let\nsetInsetInterval(() =\u003E width\u002B\u002B, 1000)\nlet width = 50\nsetInterval(() =\u003E width\u002B\u002B, 1000)// \texport let rounds\nrounbead_bead\t\t\u003Clabel\u003ENumber of rounds\n\t\t\t\u003Cinput type=\u0027number\u0027 value={rounds} on:input={config(\u0027rounds\u0027)} min=1 max=12\u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\n\t\tSeconsds per bead20seconseconds_per_beadseconds_per_bead (1 min)\t\u003Cdiv\u003E{connection} / {state}\u003C/div\u003E\n__acti_active_sessions sesplayers in room()\n\texport let meditatearchetopic\n\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E\u003C/h4\u003ETopicarchiarchetopic\n\t\t\u003Clabel\u003E1 minute meditation before game starts\n\t\t\t\u003Cinput type=\u0027checkbox\u0027 value={meditate} on:input={config(\u0027meditate\u0027)} \u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\t\ttextarch\nimport { arch } from \u0022os\u0022;\n\narchetarchetopicarchetpopicArchetopic\n\t\n\tconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\t\n\t\t\t\u003Cdatalist id=archetopcisics\u0027\u0027\u003E\u003C/datalist\u003E\n\t\t\t\t\n\t\t\t\u003Cop{#each ARCHARCHETOPICS as topic}\n\t\t\t\t\t\u003Coption value={topic}/?\u003E\n\t\t\t\t\t\t{/each\u003E}\t\t\t\t\t\t\t\t\t list=archarchetopics\u0027\u0027\n\t\t\u003Cdiv\u003E\u003C/div\u003E\n\t\t\t\n\t\tTotal game length (includin: ${{rounds * players *  \u002B ((meditmeditate ? 1 : 0))( * secondseconds_per_bead / 60} minutes\n\nconst round_to  = (ishx =\u003E x * 100Math.roundround(() / 20100\nroundishroundish()\n\t\n\t\t\n\t\t\t\t\u003Cdiv\u003E\n\t\t\tTotal game length: {roundish((rounds * players \u002B (meditate ? 1 : 0)) * seconds_per_bead / 60)} minutes\n\t\t\u003C/div\u003E\n\t\t() checkedT\nconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\nconst get_$: {\n\t\n\t}\t\nlet game_satastages\tgame_game_stages = []\n\tif (medimeditate) gamegame_stages.pushpush(\n\nconst MEDITATION_SECONDS = 60\n// Could make configurable?. Eh. \u002B MEDI \u002B (meditate ? 1 : 0)) \u002B  \u002B (meditate ? 1 : 0))MEDIMEDITATION_SECONDS\n\t\t\t\t\n\t\t\t\t\t\t\t{\n\t\tleblabel: \u0027Meditate\u0027,\n\t\tduration: MEDIMEDITATION_SECONDS,\n\t\t\t})\n\tfor (let i = 0; i \u003C rourounds; i\u002B\u002B) {\n\t\t\t}}\n\tfor (let i = 0rrr\tfor (let r = 0; r \u003C rounds; r\u002B\u002B) {\n\trpppplayers\n\t\t\t\t\t}\n\t\t\tgame_game_stages.pisushpush({\n\t\t\t\t\n\t\t\t\t\t\t\t})\t\t\t\tduration: secondseconds_per_bead,\n\t\t\t\tlabel: \u0027\u0060Round #{r} player #{$$p}\u0060,\t\t\t(Total game length: {roundish(\n\t\t\t\t(rounds * players * seconds_per_bead \u002B (meditate ? MEDITATION_SECONDS : 0)) / 60\n\t\t\t)} minutes)\n\t\t\u003Cdiv\u003E\n\t\t\t(Total game length: {roundish(\n\t\t\t\t(rounds * players * seconds_per_bead \u002B (meditate ? MEDITATION_SECONDS : 0)) / 60\n\t\t\t)} minutes)\n\t\t\u003C/div\u003E\ngamegame_stages.reduce(s =\u003E s.durationx, x \u002B , 0))(\n\nconst get_current_state = () =\u003E {\n\t\n\t}\texport let state\nstart_time\tfor (let s = 0; is \u003C gamegame_stages.length; is\u002B\u002B) {\n\t\t\n\t\t\t}\t\t\n\tletoffsettime_start_mslet s = 0;\n\twhile start\nimport { start } from \u0022repl\u0022;\n\nstart_ofstart_offset_msgame_duration\t\tlet state = game_stgame_stages[s]\n\t\tif (statestate.duration * 1000 \u003E offseoffset_ms) {\n\t\t\t\t\t}\n\t\t\treturn {state, offsetoffset_ms}\n\t\toffoffset_ms -= state.duration * 1000\n\treturn {\n\t\tstate: {\n\t\t\tlabel: \u0027Game complete\u0027,\t\tstate: { label: \u0027Game complete\u0027 }, offoffset_ms\n\t\t\t}// \n\n4:let timer\n$: {\n\t\n\t}\n\tif (state === \u0027playing\u0027) {\n\t\t\n\t\t\t}\t\t \u0026\u0026 timer == null\t\t//timer = setIntsetInterval(() =\u003E {\n\t\t\t\n\t\t\t\t\t}, 001000)\t\t\t//consoleconsole.loglog(\u0027tick\u0027) else if (state !== \u0027playing\u0027 \u0026\u0026 timer != null) {\n\t\t\n\t\t\t}\t\tclearIntclearInterval(timer)\n\t\ttimer = null\n\tconsoleconsole.loglog(statestate, timer)console.log(\u0027tick\u0027)\n\t\t\t\n\t\t\t\n\t\t\tlet \n\n\nconst get_current_state = (offset_ms) =\u003E {\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet state = game_stages[s]\n\t\tif (state.duration * 1000 \u003E offset_ms) {\n\t\t\treturn {state, offset_ms}\n\t\t}\n\t\toffset_ms -= state.duration * 1000\n\t}\n\treturn {\n\t\tstate: { label: \u0027Game complete\u0027 }, offset_ms\n\t}\n}{state, offset_ms} = get_curget_current_state(DateDate.nownow() - start_tstart_time)\n\t\t\t\nlet labelgame_state, labe, game_state_offset_ms\t\t\t: game_game_stageste: state_offstate_offset_ms;let \n\t\t\tgame_state = statte; state_ofstate_offset_ms = offoffset_ms\n\t\t\tssttaattee__llaabbeellstate_progress // 0 to 1 //state.label\n\t\t\twidth = offoffset_msstate.duration * 1000 offset_ms / () 100 *\n\t\u003Ch4\u003Egstate_state_label{}\u003C/h24\u003E35250\u002B1\u002B1, complete: true\n\t\t\tif (statestate.complete)  statestate.complete ? 100\n\t\t\t:\nlet xxx = alfalse\n\t\t\t\n\t\t\tif (statestate.complete) xxx = true \u0026\u0026\u0026  xxx === false)( || xxx \t\t\t\t\t\t\t\t\t\t{/if}\n\n\t\t{/if}\t\t\t\t\t\t\t{:else if state == \u0027paused\u0027}\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\n\tlet xxx = false\n\tgame_completed //\n\t Derived from other porropertiesgggaaammmeee___cccooommmppplllgame_completedgame_completedgame_completed!\n\tlet internal_state = game_game_completed ? \u0027completed\u0027 : stateinterninternal_stateinternalinternal_state\n\n$: {\n\t}\n\tconsoleconsole.loglog(\u0027internal state\u0027, interninternal_state)$:\nlet interninternal_state// // // //  \u0026\u0026 !game_game_completed( \u0026\u0026 || game_game_completed)game_completed || \n\t// Sadly we can\u0027t use internal_state here because it generates a cycligc dependancy.iiiinnnntttteeeerrrrnnnnaaaallll____game_completedResetwaiting\n$: {\n\t\n\t}\tif (state !== \u0027playing\u0027) game_game_completed = false\n\ttransition: width 1s  linear;0.21 *//* 1000\n\t[\n\t\t\n\t{\t\n\t\t\t}\n\t\tconsoleconsole.loglog(\u0027xxx\u0027)\n\t\tstate_label=  = \u0027Waiting for host to startgame o to start\u0027state_state_label = \u0027Waiting for game to start\u0027//0\n\t\twidth = 0\n\t\n\t else {\n\t\t\t\tstate_label = \u0027Waiting for game to start\u0027\n\t\twidth = 0\n\t\t\t}\t\t\t\t\t\tstate_label = \u0027Waiting for game to start\u0027\n\t\twidth = 0\n else \n\t\t\t}\n\t\n\tif (}\n\n$: {interninternal_state != \u0027p= \u0027playing\u0027) {=waiting\u003Cscript\u003E\nexport let room\nexport let connection\nexport let state\nexport let start_time\nexport let topic\nexport let meditate\nexport let players\nexport let rounds\nexport let seconds_per_bead\nexport let _active_sessions\n\nlet game_completed = false // Derived from other properties\nlet internal_state\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n$: {\n\tif (state !== \u0027playing\u0027) {\n\t\tconsole.log(\u0027xxx\u0027)\n\t\tgame_completed = false\n\t}\n}\n\n\t// export let state\n\nconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\n// Could make configurable. Eh.\nconst MEDITATION_SECONDS = 60\n\nlet game_stages\n$: {\n\tgame_stages = []\n\tif (meditate) game_stages.push({\n\t\tlabel: \u0027Meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\tfor (let r = 0; r \u003C rounds; r\u002B\u002B) {\n\t\tfor (let p = 0; p \u003C players; p\u002B\u002B) {\n\t\t\tgame_stages.push({\n\t\t\t\tlabel: \u0060Round ${r\u002B1} player ${p\u002B1}\u0060,\n\t\t\t\tduration: seconds_per_bead,\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nconst update_state = async patch =\u003E {\n\tawait fetch(\u0060${room}/configure\u0060, {\n\t\tmethod: \u0027POST\u0027,\n\t\tmode: \u0027same-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027: \u0027application/json\u0027,\n\t\t},\n\t\tbody: JSON.stringify(patch)\n\t})\n}\n\nconst upd = (k, v) =\u003E () =\u003E update_state({[k]: v})\n\nconst config = k =\u003E e =\u003E {\n\tconsole.log(\u0027k\u0027, k, e.data, e.value, e.target.value, e.target.type)\n\tconst raw_value = e.target.value\n\tconst value = e.target.type === \u0027number\u0027 ? raw_value|0\n\t\t: e.target.type === \u0027checkbox\u0027 ? e.target.checked\n\t\t: raw_value\n\tupdate_state({[k]: value})\n}\n\nconst roundish = x =\u003E Math.round(x * 100) / 100\n\n// const start = () =\u003E {\n// \tconsole.log(\u0027start!\u0027)\n// \tupdate_state({state: \u0027playing\u0027})\n// }\n\n// let round_arr\n// $: round_arr = new Array(Math.max(rounds, 0)).fill()\n\n\nconst get_current_state = (offset_ms) =\u003E {\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet state = game_stages[s]\n\t\tif (state.duration * 1000 \u003E offset_ms) {\n\t\t\treturn {state, offset_ms}\n\t\t}\n\t\toffset_ms -= state.duration * 1000\n\t}\n\treturn {\n\t\tstate: { label: \u0027Game complete\u0027, complete: true }, offset_ms\n\t}\n}\n\nlet width = 0\n\nlet timer\nlet state_label\n\n$: {\n\tconsole.log(state, timer)\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !game_completed) {\n\t\ttimer = setInterval(() =\u003E {\n\t\t\tconsole.log(\u0027tick\u0027)\n\n\t\t\tlet {state, offset_ms} = get_current_state(Date.now() - start_time)\n\t\t\tstate_label = state.label\n\t\t\t\n\t\t\twidth = state.complete ? 100\n\t\t\t: 100 * offset_ms / (state.duration * 1000)\n\n\t\t\tif (state.complete) game_completed = true\n\n\t\t}, 1000)\n\t} else if ((game_completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t}\n}\n\n$: {\n\tif (internal_state === \u0027waiting\u0027) {\n\t\tstate_label = \u0027Waiting for game to start\u0027\n\t\twidth = 0\n\t}\n}\n\n$: {\n\tconsole.log(\u0027internal state\u0027, internal_state)\n}\n\n// setInterval(() =\u003E width\u002B\u002B, 1000)\n\u003C/script\u003E\n\n\u003Cmain\u003E\n\t\u003Ch1\u003EGlass Bead Game Timer\u003C/h1\u003E\n\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E\u003C/h4\u003E\n\t\u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E\n\t\u003Cdiv\u003E{connection} / {state}\u003C/div\u003E\n\t\u003Cdiv\u003E{_active_sessions} player(s) in room\u003C/div\u003E\n\n\t\u003Ch4\u003E{state_label}\u003C/h4\u003E\n\t\u003Cdiv id=\u0027progresscontainer\u0027\u003E\n\t\t\u003Cdiv id=\u0027progress\u0027 style=\u0027width: {width}%\u0027\u003E\u003C/div\u003E\n\t\u003C/div\u003E\n\n\t\u003Cdiv id=\u0027rounds\u0027\u003E\n\t\t\u003Ch2\u003EGame structure\u003C/h2\u003E\n\t\t{#if meditate}\n\t\t\t\u003Cdiv\u003EMeditation (1 min)\u003C/div\u003E\n\t\t{/if}\n\t\t{#each Array(Math.max(rounds, 0)) as _, r}\n\t\t\t\u003Cdiv\u003ERound {r\u002B1}:\n\t\t\t\t{#each Array(Math.max(players, 0)) as _, p}\n\t\t\t\t\t\u003Cspan\u003E{p\u002B1} \u003C/span\u003E\n\t\t\t\t{/each}\n\t\t\t\u003C/div\u003E\n\t\t{/each}\n\t\u003C/div\u003E\n\n\t\u003Cdiv id=\u0027config\u0027\u003E\n\t\t\u003Ch2\u003EConfig\u003C/h2\u003E\n\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t{:else if internal_state == \u0027completed\u0027}\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027waiting\u0027)}\u003EReset\u003C/button\u003E\n\t\t{/if}\n\n\t\t\u003Clabel\u003ETopic\n\t\t\t\u003Cinput type=\u0027text\u0027 value={topic} on:input={config(\u0027topic\u0027)} list=\u0027archetopics\u0027 \u003E\n\t\t\t\u003Cdatalist id=\u0027archetopics\u0027\u003E\n\t\t\t\t{#each ARCHETOPICS as topic}\n\t\t\t\t\t\u003Coption value={topic}\u003E\n\t\t\t\t{/each}\n\t\t\t\u003C/datalist\u003E\n\t\t\u003C/label\u003E\n\n\t\t\u003Clabel\u003E1 minute meditation before game starts\n\t\t\t\u003Cinput type=\u0027checkbox\u0027 checked={meditate} on:input={config(\u0027meditate\u0027)} \u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\n\t\t\u003Clabel\u003ENumber of players\n\t\t\t\u003Cinput type=\u0027number\u0027 value={players} on:input={config(\u0027players\u0027)} min=1 max=12 \u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\n\t\t\u003Clabel\u003ENumber of rounds\n\t\t\t\u003Cinput type=\u0027number\u0027 value={rounds} on:input={config(\u0027rounds\u0027)} min=1 max=20\u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\n\t\t\u003Clabel\u003ESeconds per bead\n\t\t\t\u003Cinput type=\u0027number\u0027 value={seconds_per_bead} on:input={config(\u0027seconds_per_bead\u0027)}\u003E\n\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\t\u003C/label\u003E\n\n\t\t\u003Cdiv\u003E\n\t\t\t(Total game length: {roundish(\n\t\t\t\t(rounds * players * seconds_per_bead \u002B (meditate ? MEDITATION_SECONDS : 0)) / 60\n\t\t\t)} minutes)\n\t\t\u003C/div\u003E\n\t\t\u003Cdiv\u003E\n\t\t\t(Total game length: {roundish(\n\t\t\t\tgame_stages.reduce((x, s) =\u003E x \u002B s.duration, 0) / 60\n\t\t\t)} minutes)\n\t\t\u003C/div\u003E\n\t\u003C/div\u003E\n\u003C/main\u003E\n\n\u003Cstyle\u003E\n\n#config {\n\tmargin-top: 2em;\n}\n\nlabel {\n\tdisplay: block;\n}\n\n#progresscontainer {\n\t/* width: calc(100% - 50px); */\n\tmargin: 25px;\n\theight: 5em;\n\tborder: 2px solid white;\n}\n\n#progress {\n\tbackground-color: white;\n\t/* width: 50%; */\n\theight: 100%;\n\t/* transition: width 1s linear; */\n}\n\t/* main {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t} */\n\u003C/style\u003E\n\nexport let ready\n\t{#if interninternal_state === \u0027loading\u0027}\n\t\n\t{:else }}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t{/if}\t\t\t\u003Ch1\u003ELoading intgame state from server\u003C/h1\u003E\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027waiting\u0027)}\u003EReset\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027completed\u0027}\t\t\t\t\t\t\t internal_state == \u0027completed\u0027 || paused game\n\t\t\t\t{/if}\t\t\t\n\t\t\t#\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\u003C!-- \u003Cinput type=\u0027range\u0027 value={players} on:submit={config(\u0027players\u0027)} min=1 max=12\u003E --\u003E\n\t\tlet last_atestate = null\n\t\t\n\t\t\t\n\t\t\tif (last_last_state \u0026\u0026 last_stlast_state != !== state) {\n\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\tconsoleconsole.loglog(\u0027state changed\u0027)\n\t\t\t\tlast_last_state = statestate{\n\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t// And play gong\n\t\t\t\n\t\t\t\t\t\tif (last_state !== state) {\n\t\t\t\tconsole.log(\u0027state changed\u0027)\n\t\t\t\tlast_state = state\n\t\t\t}\n\n\t\n\u003Caudio id=\u0022audiotag1\u0022 src=\u0022audio/flute_c_long_01.wav\u0022 preload=\u0022auto\u0022\u003E\u003C/audio\u003E\t\n\thi_-metal-tone.mp3\u003Ctrack kind=\u0022captions\u0022\u003E\n\t\t\n\t\t\u003C/track\t\u003C/track\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\taudio1 bind:this={audio1}\n\nlet audio1\n\t\taudaudio1.play()../\n\t\u003Caudio bind:this={audio1} src=\u0022../hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003Elo2let audio1\n2 --\u003E\u003C!-- {\n\t\t\n\t\t}\n\t\tlabel: \u0027Meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\tif (meditate) game_stages.push({\t\t\n\t}]\t\t\t\t\n\t\tmeditate ? \u0027Meditation\u0027 : \u0027Game\u0027\u0060${} will start is about to start\u00603// details\n\t\t\tdetails\n\t\t\t\u003Csummary\u003EConfiguration\n\t\t\t\tGame \u003C/summ/summary\u003E\u003ESettingssround_round_round_end_end_// \n\t\t\t\tcompleend_auend_audio.play()completcompletcomplet\n\t\t\t\troundround_audio.play()if (!state.complete) // \n\t\tget_current_state(Date.now() - start_time)\n\t\t// The game miWe migthht ght have loaded when the game is already finished. IfThis is dirty, but  kinda cidirty...\n\t\t\n\t\t\n\t\t\n\t\tlet {state } } if (.statestate.complete) {\n\t\t\t\n\t\t\t\t\t}\t\t\tgame_game_completed = true, but \u003C/style\u003EI\u0027m special casing it to avoid audio playing.\u003C/style\u003E\u003C/style\u003E\n\t\t//  else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\tstate_state_label = \u0027Game already finishedfinished. \u0027\n\n\nlet {state, offset_ms}\ngame_game_game_game_game_game_\n\n$: {\n\tconsole.log(state, timer)\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !game_completed) {\n\t\t// We might have loaded when the game is already finished. This is kinda\n\t\t// dirty, but I\u0027m special casing it to avoid audio playing.\n\t\tif (get_current_state(Date.now() - start_time).state.complete) {\n\t\t\tgame_completed = true\n\t\t\tstate_label = \u0027Game already finished\u0027\n\t\t} else {\n\t\t\tlet last_state = null\n\n\t\t\ttimer = setInterval(() =\u003E {\n\t\t\t\tconsole.log(\u0027tick\u0027)\n\n\t\t\t\tlet {state, offset_ms} = get_current_state(Date.now() - start_time)\n\t\t\t\tstate_label = state.label\n\t\t\t\t\n\t\t\t\twidth = state.complete ? 100\n\t\t\t\t: 100 * offset_ms / (state.duration * 1000)\n\n\t\t\t\tif (last_state !== state) {\n\t\t\t\t\tconsole.log(\u0027state changed\u0027)\n\t\t\t\t\tlast_state = state\n\t\t\t\t\t// if (!state.complete) round_audio.play()\n\t\t\t\t}\n\n\t\t\t\tif (state.complete) {\n\t\t\t\t\t// And play gong\n\t\t\t\t\tgame_completed = true\n\t\t\t\t\tcomplete_audio.play()\n\t\t\t\t}\n\n\n\t\t\t}, 1000)\n\t\t}\n\t} else if ((game_completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t}\n}// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // \n$: game_comgame_completed = game_state == null ? false : game_stategame_state.complete!!\n#: $: width = state.complete ? 100\n\t\t\t\t: 100 * offset_ms / (state.duration * 1000)$: width = state.complete ? 100 : 100 * offset_ms / (state.duration * 1000)\n\n#: $: state_lstate_label = game_state == null ? \u0027unknowno\u0027 : game_stategame_state.label// // \n\t\t\t\n\t\t\tconst tic k = () =\u003E {\n\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\tconsole.log(\u0027tick\u0027)\n\n\t\t\t\tlet {state, offset_ms} = get_current_state(Date.now() - start_time)\n\t\t\t\t// state_label = state.label\n\t\t\t\t\n\t\t\t\tif (last_state !== state) {\n\t\t\t\t\tconsole.log(\u0027state changed\u0027)\n\t\t\t\t\tlast_state = state\n\t\t\t\t\t// if (!state.complete) round_audio.play()\n\t\t\t\t}\n\n\t\t\t\tif (state.complete) {\n\t\t\t\t\t// And play gong\n\t\t\t\t\t// game_completed = true\n\t\t\t\t\tcomplete_audio.play()\n\t\t\t\t}no_soundaudioplay_if (play_audio) \n\t\t\t\tticktick(true)\n\t\t\tticktick(false)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgame_game_game_game_game_state: new_\n\t\t\tgame_state = new_gamnew_game_state\n\t\t\t\t\t\t\tgame_state = new_game_state\t\t\t\tcomplete_state\nconst { label: \u0027Game complete\u0027, complete: true }complete_state = \n\t\t\tconsoleconsole.loglog(\u0027state\u0027, statestate, \u0027timcompleted\u0027\u0027, game_compgame_completed)// // \n\tgame_completed = game_state == null ? false : !!game_state.completelet completed\n\tccccoooommmmpppplllleeeetttteeeedddd\n\tconconsole\u0027xx\u0027, , \t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tlet completed = game_state == null ? false : !!game_state.complete\ncompleted\n\t\t\t\tcompleted = game_new_game_statenew_game_state.complete\n\t\tconosoleconsole.loglog(\u0027cancelled interval timer\u0027)\n\nconst tick = (play_audio) =\u003E {\n\t\n\t}\t\tconst tick = (play_audio) =\u003E {\n\t\t\tconsole.log(\u0027tick\u0027)\n\t\t\tconsole.log(\u0027state\u0027, state, \u0027completed\u0027, completed)\n\n\t\t\tlet {game_state: new_game_state, offset_ms} = get_current_state(Date.now() - start_time)\n\t\t\t// state_label = state.label\n\t\t\t\n\t\t\tif (last_state !== game_state) {\n\t\t\t\tconsole.log(\u0027state changed\u0027)\n\t\t\t\tlast_state = game_state\n\t\t\t\tgame_state = new_game_state\n\t\t\t\tcompleted = new_game_state.complete\n\t\t\t\t// if (!state.complete) round_audio.play()\n\t\t\t}\n\n\t\t\tif (game_state.complete) {\n\t\t\t\t// And play gong\n\t\t\t\t// completed = true\n\t\t\t\t// if (play_audio) complete_audio.play()\n\t\t\t}\n\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tlet last_state = null\n// state \u0026\u0026 statestate.completenew_newg_game_state !== // \n\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t: new_offset_ms\n\toffset_ms = new_ofnew_offset_ms// // !!completed\u0026\u0026 , new_gamnew_game_state.labelabel, new_ganew_game_state.complete ? : false//  ga, game_state$: consoleconsole.loglog(\u0027game state xxx\u0027, game_state)\t\tgame_state = new_game_state\ngame_statexx.x.x.xx..const tick = (play_audio) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\tconsole.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tlet x = get_current_state(Date.now() - start_time)\n\t// state_label = state.label\n\t\n\toffset_ms = x.offset_ms\n\tif (x.game_state !== game_state) {\n\t\tconsole.log(\u0027state changed\u0027, x.game_state.label, x.game_state.complete)\n\t\tgame_state = x.game_state\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (game_state.complete) {\n\t\t\t// And play gong\n\t\t\t// completed = true\n\t\t\t// if (play_audio) complete_audio.play()\n\t\t}\n\t}\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst tick = (play_audio) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\tconsole.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tlet x = get_current_state(Date.now() - start_time)\n\t// state_label = state.label\n\t\n\toffset_ms = x.offset_ms\n\tif (x.game_state !== game_state) {\n\t\tconsole.log(\u0027state changed\u0027, x.game_state.label, x.game_state.complete)\n\t\tgame_state = x.game_state\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (game_state.complete) {\n\t\t\t// And play gong\n\t\t\t// completed = true\n\t\t\t// if (play_audio) complete_audio.play()\n\t\t}\n\t}\n}x_x_x_x_: x_gamex_game_statex_gamex_ = null{}nullsetTimeout(() =\u003E , 0)\n\nif (state === \u0027playing\u0027) ticktick()ffalse// bar_bar_bar_bar_\nlet timer\n// {xyiviacyiviacagesagesggggstagegg\nconst complete_stage = { label: \u0027Game complete\u0027, complete: true }waiting\u0027Waiting for game to start\u0027\n\tif (state !== \u0027playing\u0027) return waitingwaiting_stage \u0026\u0026 state !== \u0027=== \u0027waiting\u0027\n\tgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrgntcurrge\n\n$: game_completed = current_stage == null ? false : !!current_stage.complete\nlet bar_width = 0\n$: bar_width = state.complete ? 100 : 100 * offset_ms / (state.duration * 1000)\n\nlet state_label\n$: state_label = current_stage == null ? \u0027unknown\u0027 : current_stage.label\n\n// ggeegggg || state === \u0027paused\u0027// \ntick(false)const {new_stage: stagstage: new_stage, noeew_offs: offset_ms}new_offsnnnneeee____wwww____ssssttttaaaaggggeeee // waiting, playing, paused.loading, // \nif (state === \u0027playing\u0027 || state === \u0027paused\u0027) tick(false)// !== loadingcurrent_current_\nlet , // \n\tif (state !== \u0027loading\u0027) ticktick()false\n\t// //  = null// current_stage == null ? 0\n\t: \n\t: new_offs: \n\t\tticktick(false)setTime setImmesetImmediate() () =\u003E )setTimeoutsetTimeout( || state === \u0027loading\u0027\n$: ticktick(false) = []\n$: ticktick(false)// //  else if (state === \u0027waiting\u0027) {\n\t\t\n\t\t\t}\t\tticktick()false// {stage: }, offset_ms: 0, duration: iInfinity\n\t\tif (play_audio) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (current_stage.complete) complete_audio.play()\n\t\t\telse  round_audio.play()\n\t\t\t\t\t}\n\t\tno_sound_: true !! \u0026\u0026 !new_stagenew_stage.no_no_sound1151// // \n\t\ttick(false)const get_current_stage = (offset_ms) =\u003E {\n\tif (state === \u0027waiting\u0027) return {stage: waiting_stage, offset_ms: 0}\n\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet stage = game_stages[s]\n\t\tif (stage.duration * 1000 \u003E offset_ms) {\n\t\t\treturn {stage, offset_ms}\n\t\t}\n\t\toffset_ms -= stage.duration * 1000\n\t}\n\treturn {\n\t\tstage: complete_stage, offset_ms\n\t}\n}\n// // // // // // // // // // // // // \n\tlet offset_seconds = offsetoffset_ms / 1000Math.roundround()sec: offset_sec * 1000secsecsecsecsecsecsec\n\t\t\t\u003C!-- \u003Cdiv\u003E\n\t\t\t\t(Total game length: {roundish(\n\t\t\t\t\t(rounds * players * seconds_per_bead \u002B (meditate ? MEDITATION_SECONDS : 0)) / 60\n\t\t\t\t)} minutes)\n\t\t\t\u003C/div\u003E --\u003E\t\t\t\t\n2em\n\t\t\t\tr, p\n\nconst progress_class = (typetype,\nimport { type } from \u0022os\u0022;\n\n r, p) =\u003E {\n\t\n\t}\tif (statecurrent_gcurrent_stage == null) return \u0027\u0027\n\t\n\t\n\t\t\t\ttype: \u0027bead\u0027,\t\t\t\ttype: \u0027bead\u0027, r, p\n\t\ttype: \u0027meditate\u0027,\n\t\ttype\u0027: \u0027 type: \u0027complete\u0027,new_stage.type === \u0027complete\u0027current_stage.type === \u0027complete\u0027current_stage.type === complete\u0027\u0027.type === \u0027compelte\u0027letecurrentcurrent_stage.type === \u0027complete\u0027current// \tif currencurrent_stage\nconst order = [\u0027meditate, \u0027, \u0027bead\u0027, \u0027complete\u0027]if const current_io = orderorder.indeindexOf(currencurrent_stage.type)\tconst current_o = order.indexOf(current_stage.type)\nelement_otype\n\t\n\tif (currencurrent_o element_o \u003C) return \u0027done\u0027\n\telse if (elemelement_o \u003E currentcurrent_o) return \u0027waiting\u0027\n\telse return \u0027ipactive\u0027 class={progress_class(\u0027meditate\u0027)} class={progress_class(\u0027meditate\u0027)}bead, r, p\n\n.done { color: blue; }.done { color: blue; }\nwaitingwhite.waiting { color: white; }\nactivepurplemagmagentastage, ssttaaggeecurrent_stage, current_stage,  if (tyope === \u0027bead\u0027)\n\telse return \n\t\t r=  == stage.r ? =\nconst class_for( = x =\u003E x \u003C 0 ? \u0027done\u0027 : \n\tx \u003E 0 ? \u0027waiting\u0027\n\t: \u0027active\u0027\n\t\n\tconst o_odiff = element_o \u003C current_o-\n\treturn o_diff === 0 !== 0 ? class_forclass_for(o_diff)\n\t\t: \n\t\t: class_forclass_for(0) ?\n\t\t\t() return r === stage.r ? \n\t\t\t return r === stage.r ? \t\t\t\n\tif (// element_o - current_o!==element_o - current_o\n\t\n\t tytype === \u0027bead\u0027 \u0026\u0026 stage.type === \u0027bead\u0027 ?\n\t\t: class_for(element_o - current_o)\n\t\t r === stage.r ? class_forclass_for(p - stage.p) : (class_forclass_for(r - stage.r))text-dectext-decoration: ;strilineline-through border: 1px solid white;#eee888\n\nlet settings_disabled = $:state === \u0027playing\u0027\n// This will get more complex in time. For now, pause the game to fiddle.disabled={ settsettings_disabled} disabled={settings_disabled} disabled={settings_disabled} disabled={settings_disabled} disabled={settings_disabled}\n#: $: current_stage.type === \u0027complete\u0027console.loglog(\u0027curren tt stage type\u0027, ) \u0026\u0026 current_current_stage\n#: $: consoleconsole.loglog(\u0027game_completed\u0027, game_complgame_completed)\n)(, (current_stage.type === \u0027complete\u0027)current_stage \u0026\u0026 // $: game_completed = current_stage == null ? false : (current_stage.type === \u0027complete\u0027)\n// \u0026\u0026// {\n\t\n\t}\n\tconsoleconsole.loglog(\u0027updateining game_completed\u0027, currencurrent_stage)// \n\n$: console.log(\u0027current stage type\u0027, current_stage \u0026\u0026 current_stage.type)\n// // // // //  setTsetTimeout(() =\u003E )\nlet internal_state\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n$: {\n\tif (state !== \u0027playing\u0027) {\n\t\tgame_completed = false\n\t}\n}\n// \nlet game_completed\nlet game_completed\n$: {\n\tconsole.log(\u0027updating game_completed\u0027, current_stage)\n\tgame_completed = current_stage == null ? false : (current_stage.type === \u0027complete\u0027)\n}\n\n// // // // // state !== \u0027playing\u0027 || ()\n\t// // // // \nlet bar_width = 0\n// \nlet bar_width = 0\n// $: game_completed = current_stage \u0026\u0026 (current_stage.type === \u0027complete\u0027)\n// // // // // // // // // // // internal_state === \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n: \t//  // setTimeout needed to get around some weird race condition.\n\t\t// setTimeout needed to get around some weird race condition. There\u0027s probably other ways to better ways to structure this :/\n\t\t// \n\t: starcurrencurrent_stage.type === \u0027waiting\u0027 ? 0state\n\t: current_stage.type === \u0027complete\u0027 ? 100\t\n\t\t\t\u003Cdiv id=\u003E{stage_secs_remaining}\u003C/div\u003Eoffsetoffset_sec\n\t\t\u003Cdiv id=\u0027progresscontainer\u0027\u003E\t\tcurrent_stage.duration -  ? current_stage : \u0027\u0027\n\t\n\t\n *//*  \u0026\u0026 !complinternal_internal_stateinternal_current_stage \u0026\u0026 !complgame_complgame_completed)(ainterninternal_state === \u0027playing\u0027 || interninternal_state --=== \u0027paused\u0027 \u0026\u0026 current_current_stage)(\n\t\t\u003Ca href=\u0027.\nimport Game from \u0022./Game.svelte\u0022\nGame./.././..\u0022\u0022\u003EJoin anohter ranother room\u003C/a\u003E \u003Ca href=\u0022../..\u0022\u003EJoin another room\u003C/a\u003E\n\t\t\u003Ca href=\u0022../..\u0022\u003EJoin another room\u003C/a\u003EChange =\t\t\t\t\t\u003Cdiv id=\u0027progresscontainer\u0027\u003E\n id=time\u0027\u0027progress_\n\n#progress-time_ {\n\t\n\t}\tposition: absolute;\n\tcolor: red;setTimeout(() =\u003E tick(false)) || state === \u0027paiseused\u0027export let seconds_per_bead\npaused_progress \u002B pausepaused_progress-\n\tlet const time = state === \u0027playing\u0027 ? Date.now() - start_time\n\t\t: state === \u0027paused\u0027 ? pauspaused_progress\n\t\t: 0time\n\tfont-size: 60px;\n\tpositioin: p\tposition: relative;\n\tborder: 2px solid white;\n\theight: 5em;\n\tmargin: 25px;\t\n\tmix-blenmix-blend-mode: ;differedifference330202#rgb(#330202 *//* \t/* font-size: #330202; */\nrgb(204,254,254)color\tcolor: rgb(204,254,254);\nfont-size60px;\tcolor: rgb(204,254,254);\n *//*  *//* white *//* \u0027\u0027sroundroundbead\u0027 \u002B  \n.bead {\n\t\n\t}\tdisplay: block;margin-leftright: 1em;23px42em154\n\tmargin-efleft: 1em;5px\n\t\n\n\t\n\n\tcolor: #888;\n.waiting {\n}\t *//* \n\tpadding-: 0 2px;\n\t\tpadding: 0 2px;\t421(()\t\t\u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E\n\n\t\t{#if _active_sessions == 1}\t\t\u003Cdiv\u003E{_active_sessions} player(s) in room\u003C/div\u003E\n\t\n\t\t\t{:else}\t\t\n\t\t{/if}\tYou are alone in the roomjoin youare with youinare in the this room\n#h1 {\n\t\n\t}\tmaringrgin-top: 2em;\n1\u003Ca href=\u0022../..\u0022\u003E(Change room)\u003C/a\u003E leave --\u003E\u003C!-- \n\t\t{#if _active_sessions == 1}{#if }_active_sessions == 1 --\u003E\u003C!-- connection !== \u0027connected\u0027\n\t\t{/if}\n\t\t\tDISCONNECTED FROM \u003Cdiv\u003EGAME SERVER\u003C/div\u003E\n\t\t\t\u003C{:else}\t\t\n\t\t{/if}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003Cdiv\u003E{connection} / {state}\u003C/div\u003E\n --\u003E\u003C!-- \u003E == = \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n\t\t\t\t: state === \u0027playing\u0027:  ? \u0027GamePGame in ppausedGame pausedPAUSEDGAME \u0027\n\t\t: \u0027\u0027\t\n\t\t\tthe \n\t\thhhhhh444444divdivdivdivdivdiv\t\t\t: state === \u0027paused\u0027 ? \u0027GAME PAUSED\u0027\nplaying  -Game in progress\n\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003Econtorlsrols\n\nbutton \n{\n\t\n\t}\tfont-size: 200%;140%\n\tmargin: 10px 0;\n\nsummary {\n\t\n\t}\ttext-decorattext-decoration: ;undunderline\n\tpointer: mocursor: pointer;grabpointer\n\t\t\t\n\t\t\t\u003Cdiv\u003E\u003C/div\u003E\n\t\t\t\t\n\t\t\tThis will dmodify the game control for all players.drive \n\t\t\t\t\t\t\u003Cdiv\u003E\n\t\t\t\tThis will drive the game for all players.\n\t\t\t\u003C/div\u003E\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\u003Cdiv\u003E\n\t\t\t\tThis will drive the game for all players.\n\t\t\t\u003C/div\u003E\n\n\n\ndetails \u003E * {\n\t\n\t}\tmarginl-efleft: 2em;:not(fir:fir:first-child)\ndetilaails: { {\n\t\n\t}\tpadding-top: 2em;\ndetails {\n\tpadding-top: 2em;\n} \u003E :first:first-child:first-childntbottommargin *//* 1inputlabelwidth: min-width: 10em;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\u003C\u003C\u003C\u003Cssssppppaaaannnn\u003E\u003E\u003E\u003E\u003C\u003C\u003C\u003C////ssssppppaaaannnn\u003E\u003E\u003E\u003Elabel \u003E :fir:first-child\n\tdisplay: inlineinline-block;\n\t\t\t\t\u003Cspan\u003E\u003C/span\u003E52Meditate: style=\u0027\u0027maringgin-top: 1em;\n\t\n\tmain {\n\t\t\n\t\t\t}\tmargin-bottom: 2em;3 --\u003E\u003C!-- \n\t\t\u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E --\u003E\u003C!-- 11 --\u003E\u003C!-- \n\t\t\u003C!-- \u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E --\u003E11\n\ninput:  {\n\t\n\t}\theight: width: 2em3em;10\n\theight: 1.3;10pxfont-size: 16px\n\nsummary \u003E label{  {\n\t\n\t}\tmarginlline-height: 2;margint-tbottom3pxeffectPre-gamem  meditationmin-67543\n\tcolor: #330202;\nbutton {\n\tfont-size: 140%;\n\tmargin: 10px 0;\n}\n\n\tcolor: #330202; /* TODO: Use CASSS variable for this */\n\t\t\t\n\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E_xxBecome Magister Ludimagistertryue// \n\t\t\t\n\t\t\t\u003Cdiv\u003E\n\t\t\t\tMagister status: {}\n\t\t\t\t\u003C/div\t\t\t\u003C/div\u003Eexport let _active_sessions\nmagi_magistermagi_magisterJSON.stringifystringify()\n\t\t{#if }\n\t\t\t\n\t\t{/if_magister == null || _mag_magister == faltrue}\n\t\t{:else}\n\t\t\t,\u003Cdiv\u003EamGamWaiGame controlled by Only the Magister Ludi can Tis in is in control of this game\u003C/div\u003E\t\t\u003Cdetails id=\u0027config\u0027\u003E\n\t\t\t\u003Csummary\u003EGame controls\u003C/summary\u003E\n\n\t\t\t\u003Cdiv\u003E\n\t\t\t\tMagister status: {JSON.stringify(_magister)}\n\t\t\t\u003C/div\u003E\n\n\t\t\t\u003Cdiv\u003E\n\t\t\t\tThis will effect all players.\n\t\t\t\u003C/div\u003E\n\n\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t\t{/if}\n\n\t\t\t{#if internal_state == \u0027paused\u0027 || internal_state == \u0027completed\u0027 }\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027waiting\u0027)}\u003EReset game\u003C/button\u003E\n\t\t\t{/if}\n\n\t\t\t\u003Clabel\u003E\n\t\t\t\t\u003Cspan\u003ETopic\u003C/span\u003E\n\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027text\u0027 value={topic} on:input={config(\u0027topic\u0027)} list=\u0027archetopics\u0027 \u003E\n\t\t\t\t\u003Cdatalist id=\u0027archetopics\u0027\u003E\n\t\t\t\t\t{#each ARCHETOPICS as topic}\n\t\t\t\t\t\t\u003Coption value={topic}\u003E\n\t\t\t\t\t{/each}\n\t\t\t\t\u003C/datalist\u003E\n\t\t\t\u003C/label\u003E\n\n\t\t\t\u003Clabel\u003E\n\t\t\t\t\u003Cspan\u003EPre-game meditation\u003C/span\u003E\n\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027checkbox\u0027 checked={meditate} on:input={config(\u0027meditate\u0027)} \u003E\n\t\t\t\u003C/label\u003E\n\n\t\t\t\u003Clabel\u003E\n\t\t\t\t\u003Cspan\u003ENumber of players\u003C/span\u003E\n\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 value={players} on:input={config(\u0027players\u0027)} min=1 max=12 \u003E\n\t\t\t\u003C/label\u003E\n\n\t\t\t\u003Clabel\u003E\n\t\t\t\t\u003Cspan\u003ENumber of rounds\u003C/span\u003E\n\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 value={rounds} on:input={config(\u0027rounds\u0027)} min=1 max=20\u003E\n\t\t\t\u003C/label\u003E\n\n\t\t\t\u003Clabel\u003E\n\t\t\t\t\u003Cspan\u003ESeconds per bead\u003C/span\u003E\n\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 value={seconds_per_bead} on:input={config(\u0027seconds_per_bead\u0027)}\u003E\n\t\t\t\u003C/label\u003E\n\n\t\t\t\u003Cdiv style=\u0027margin-top: 1em;\u0027\u003E\n\t\t\t\t(Total game length: {roundish(\n\t\t\t\t\tgame_stages.reduce((x, s) =\u003E x \u002B s.duration, 0) / 60\n\t\t\t\t)} minutes)\n\t\t\t\u003C/div\u003E\n\n\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, \u0027true\u0027)}\u003EBecome Magister Ludi\u003C/button\u003E\n\t\t\u003C/details\u003E\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\t\u003Cdiv\u003E\n\t\t\t\t\tMagister status: {JSON.stringify(_magister)}\n\t\t\t\t\u003C/div\u003E\n\t\t\t\t\t\t\t\n\t\t\n\t\t\t\t\u003Cdiv\u003E\n\t\t\t\t\u003C/div\u003E\t id=becomemagister_box\u0027\u0027\n\t\t\t\t\tTheOnce somebody becomesascends to mMagister Ludi of the game, all other users players loare locked out of , can no longer start or stop the game. Magister ludThe Ludi will lose orelinquish  status\n\n#config {\n\tmargin-top: 2em;\n}\n\n#config {\n\tmargin-top: 2em;\n}\n\nlabel {\n\tdisplay: block;\n}\n#config {\n\tmargin-top: 2em;\n}\n\n/* **** CofinfGame config ***** //***** Game config *****/\n#config {\n\tmargin-top: 2em;\n}\n\n#config {\n\tmargin-top: 2em;\n}\n\n\n\n.#magister_box {\n\t\n\t}\tborder: 1px dashed  white;\n\tmargin: 21em 0;\n\tpwdiadding: 2em;0.5Ascend to the throne of\n\n#magister_box\u003E but \u003E button {\n\t\n\t}\tdisplay: block;\n\t\n\tmax-width: 300px;5\n\t\t\t\t\tOnce somebody ascends to Magister Ludi status, other players can no longer start or stop the game.Assume the mantle ofa playercontrol theIF a f a master of the games is present, other players cannot access the game\u0027s controls.lose\tfont-xsize: 80%;10\n\tbackground-color: black;\n\tblend-modebackground-blend-mode: ;darkenwhite\n\tblend-momix-blend-mode: ;darken; *//* #1c0303\n\twidth: 100%;\n\tmargin: 0 2em;When the cannot  the game --\u003E\u003C!-- \n\t\t\t\t\tWhen present, only the mMaster of the GAmesame s can control thehis game. hethe  timer\n\tmargin-top: 0;18\n\tmarpadding: 2px audo;to;00\n\tpadding: 34px 0;3has access to the game controls Will you borrow power, or steal it?Restart\n\nbody {\n\t\n\t}\tcolor: red;bckacbackground-color\n\tbackground-color: red;\n\t\t\t\t\t#{{#ifawait }\n\t\t\t\t\t\t\n\t\t\t\t\t{:then } \n\t\t\t\t\t\t\n\t\t\t\t\t{/awaitifif }\n\t\t\t\t\t\t\n\t\t\t\t\t{/if_magier_magister == null}\n\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{:else if\t\t\t\t\t _mag_magister == true}\n\t\t\t\t\t\t\t\t\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, \u0027true\u0027)}\u003EAssume the mantle of Magister Ludi\u003C/button\u003E\n\t\t\t\t\t\tWhen present, only the Master of the Games has access to the game controls.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnullAbdicate Magister Ludi statusYou are the amaster of the games. No other players can access this room\u0027s controls.\u003Cdiv\u003E\u003C/div\u003E\u003Cdiv\u003E\u003C/div\u003E\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\u003C/div\u003E\t\t\t\t\t\t You will lose exclusive right  this status if you close this browser window.null.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\u003Cdiv\u003E You are the master of the games. No other players can access this room\u0027s controls.\u003C/div\u003E\t\u003Cdiv\u003E\t\t\t\t\t\t\u003Cdiv\u003EYou will lose this status if you close this browser window. \u003C/div\u003Epppp bind:open={}config_open\n\nlet config_opconfig_open\n\n$: consoleconsole.loglog(\u0027config\u0027, congiffig_config_open)if (magst_magister == true) config_config_open = true$: if (_magister == true) config_open = true\n_acti_active_sessions = false\n// The first yseruse r has the config open by default.\n\n *//* \n\tbackground0c-color: white;\n\tcolor: color: #330202; Magister Ludi (mg)texcluisive  of the gameOther players cannot play/pause conor configure this gamer power will be lost .\n\t\t\t\t\t\t\u003Cdiv\u003EWhen present, the Magister Ludi (master of the games) has exclusive control of the game.\u003C/div\u003Epppp\u003Ci\u003EAdvanced\u003C/i\u003E - for large games\n\topacity: 5040%;\n\t\topacity: 40%;\t\n\n\topacity: 40%;\n\t\n\topacity: 40%;\n\tanimate: transition: opaopacity 1s fade;\n\n#magister_box:hover {\n\t\n\t} \topacity: 100%;0.24 ease-in-out;oitut3\n#magister_box.opaque {\n\t\n\t}opacity: 40%;\t10 class:magister_magister_opauque\n\nmagister_opaquelet  = false\n$: magimagister_opaque = true//  _masgister === true || ==_activ_active_sessions1 \u003E 616=// MAke the amagister box fully visible once there\u0027s enouhg pla critical mass of players in the roomT is\n\u003Csvelte:body/\u003E / class=style=\u0022background-color: red;\u0022lclass=\u0022foo\u0022\n\t\n\t.foo {} color: red; background-color: red;You are rspoesponsible foring, ingand inghave exclusive control overcrwowncontrolDo onot or you will be dethroned\n\t\t\t\t{#if _magister == null}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003Cdiv\u003E\n\t\n\t\t\t\t\t\t\u003C{:seelse}\n\t\t\t\t\t\t{/eif}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tYou are magister luMagister Ludi - master of the games. thisvar(--bg-color)var(--bg-color)var(--bg-color)var(--bg-color)var(--bg-color)highlight\n\n#cinonfig.magister {\n\t\n\t}var(--bg-color)\tbgackground-color: ;-hihigh--bg-highlight *//*  , #magister_box:hover\n_ class:mmagister={magister}_\n\nmain \u003E * {\n\t\n\t}\tmargin=- *//* : lef-left: 2em;3pp\t\t\t\t\t\t\u003Cp\u003EYou are the master of the games. You have exclusive control over playing, pausing and configuring this game.\u003C/p\u003E\n\t\t\t\t\t\t\u003Cp\u003EDo not close this browser window or you will be dethroned.\u003C/p\u003E\n\t\t\t\t\t\t\t\t\t\tYou are the only player whowith in charge of these controls.\tThese controls are yours. --\u003E\u003C!--  \n\t\t\t\tclass:magister_opaque --\u003E\u003C!--  class:magister_opaqueCThese c aloneto weiieldalone --\u003E\u003C!-- to wieldeialoneCThese cclass:magister={_magister} the class:magister={_magister} CThese c aloneto weiieldalone --\u003E\u003C!--  class:magister={_magister} .magister {\n\tbackground-color: var(--bg-highlight);\n}\n\n\n\n\u003Csvelte:head\u003E\n   {#if isModal}\n      \u003Cstyle\u003E\n         body {\n            overflow: hidden;\n         }\n      \u003C/style\u003E\n   {/if}\n\u003C/svelte:head\u003E\t\n\n\u003Csvelte:head\u003E\n   {#if isModal}\n      \u003Cstyle\u003E\n         body {\n            overflow: hidden;\n         }\n      \u003C/style\u003E\n   {/if}\n\u003C/svelte:head\u003E\t\u003Cmain class:magister={_magister}\u003E\n --\u003E\u003C!-- _mag_magisterbackground-color: var(--bg-highlight);\t\t\t\t\t\tppclass. class=config\u0027\u0027will start is in control of this gameis managing this game? Will you\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n_clock_offset: 0,export let  \u002B off_oclo_clock_offsetBecome *//*  *//*  *//* 80100m *//* \n\t\n\t\n\tposition: absolute;\n\tleft: 0; rigtht: 0;relativeabsolute\n\tposition: relative; *//* \n\tpadding: 0 auto;2em0auto0 pattern=\u0027d*\u0027[0-9]pattern=\u0027[0-9]*\u0027 pattern=\u0027[0-9]*\u0027 Assume the mantle of Magister Ludi\n\nlet audio_works = falsefalse\n\u0022$$: $$ {\n\t\n\t}$:\tlet a=  = new AudioAudio()\n\ta.playplay().thenthen(() =\u003E {audio_woaudio_works = true}\n\t\t,\n\t\t\t\t() =\u003E {audio_works = true},\n\n\t\t\t\n\t\tconsolconsole..loglog(\u0027Audio does not work\u0027)\n\t\t\t)\n\nfunction test_audio() {\n\t\n\t}\n$: {\t\t\t\t\t\n}\t\t\t\t\t\t\t\t\t\t\t\t\ntest_autest_audio()\n\n\t\t\taudio_works = truefalse\n\t\t\n\t\t\u003Cdiv\u003E\n\t\t\t\u003C/div\t\t\u003C/div\u003E\n\t\t{#if !audio_audio_works}\n\t\t{/if}\n\t\t\tAudio does not work\n\t\t\t\u003Cbutton on:cloick=\nfunction fix_audio(){  {\n\t\n\t]}\tef{fix_audfix_audio}\u003EFix\u003C//button\u003E\ttest_test_audio)()\n\t\t\t\n\t\t\n\t\t\tconsole.log(\u0027Audio does not work\u0027)works\n\tconsoleconsole.loglog(\u0027xx\u0027)\n\tconsole.log(\u0027xx\u0027)\n\taa.src = \u0027/lo-metal-tone.mp3\u0027\n\ta.vovolume = 0setTimeout(, 0)100\n.1fg// // // // // // // // // // // // // // // // // // // // //  --\u003E\u003C!-- var(--bg-fg--fg-color)var(--fg--fg-color)var(--fg-color)hwhitevar(--fg-c--fg-color)\n\t\t\t\u003Cdiv\u003E\u003C/div\u003E\n\t\t\t\t\u003C/div\u003E\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tssppaann\n\tpadding: 2px;32px\u0027bead\u0027 \u0027  \u002B\u002B 02px\n\tborder: 2px solid fg-var(--f--fg-color);#eee3332px solid #686868 *//* 646\n\ninput:[type=checkbox] {\n\t\n\t}\tdisplay:hidd dihidnone;height: 20px;1.5em2progress// // // // // // // // // // // // // // // // // // // // true// );(--fg-cocolor\n\tbxlet audio_works = true\n\n// function test_audio() {\n// \tlet a = new Audio()\n// \ta.volume = 0.1\n// \ta.src = \u0027/lo-metal-tone.mp3\u0027\n// \ta.play().then(\n// \t\t() =\u003E {\n// \t\t\taudio_works = true\n// \t\t\tconsole.log(\u0027Audio works\u0027)\n// \t\t},\n// \t\t() =\u003E {\n// \t\t\taudio_works = false\n// \t\t\tconsole.log(\u0027Audio does not work\u0027)\n// \t\t}\n// \t)\n// }\nfunction fix_audio(e) {\n// \tconsole.log(\u0027xx\u0027)\n// \ttest_audio()\n}\n// setTimeout(test_audio, 0)\n\n\nconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\n// Could make configurable. Eh.\nconst MEDITATION_SECONDS = 60\n\nlet game_stages = []\n$: {\n\tgame_stages = [{\n\t\tlabel: \u0060${meditate ? \u0027Meditation\u0027 : \u0027Game\u0027} is about to start\u0060,\n\t\tduration: 3,\n\t\tno_sound: true\n\t}]\n\tif (meditate) game_stages.push({\n\t\tlabel: \u0027Meditate\u0027,\n\t\ttype: \u0027meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\tfor (let r = 0; r \u003C rounds; r\u002B\u002B) {\n\t\tfor (let p = 0; p \u003C players; p\u002B\u002B) {\n\t\t\tgame_stages.push({\n\t\t\t\tlabel: \u0060Round ${r\u002B1} player ${p\u002B1}\u0060,\n\t\t\t\tduration: seconds_per_bead,\n\t\t\t\ttype: \u0027bead\u0027, r, p\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nconst update_state = async patch =\u003E {\n\tawait fetch(\u0060${room}/configure\u0060, {\n\t\tmethod: \u0027POST\u0027,\n\t\tmode: \u0027same-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027: \u0027application/json\u0027,\n\t\t},\n\t\tbody: JSON.stringify(patch)\n\t})\n}\n\nconst upd = (k, v) =\u003E () =\u003E update_state({[k]: v})\n\nconst config = k =\u003E e =\u003E {\n\t// console.log(\u0027k\u0027, k, e.data, e.value, e.target.value, e.target.type)\n\tconst raw_value = e.target.value\n\tconst value = e.target.type === \u0027number\u0027 ? raw_value|0\n\t\t: e.target.type === \u0027checkbox\u0027 ? e.target.checked\n\t\t: raw_value\n\tupdate_state({[k]: value})\n}\n\nconst roundish = x =\u003E Math.round(x * 10) / 10\n\n\nconst waiting_stage = { label: \u0027Waiting for game to start\u0027, duration: Infinity }\nconst complete_stage = { label: \u0027Game complete\u0027, type: \u0027complete\u0027 }\nconst get_current_stage = (offset_ms) =\u003E {\n\tif (state === \u0027waiting\u0027) return {stage: waiting_stage, offset_ms: 0}\n\n\tlet offset_sec = Math.round(offset_ms / 1000)\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet stage = game_stages[s]\n\t\tif (stage.duration \u003E offset_sec) {\n\t\t\treturn {stage, offset_sec}\n\t\t}\n\t\toffset_sec -= stage.duration\n\t}\n\treturn {\n\t\tstage: complete_stage, offset_sec\n\t}\n}\n\nlet current_stage = null, offset_sec\n$: console.log(\u0027current stage\u0027, current_stage)\n\n\nconst tick = (play_audio) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\t// console.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tconst time = state === \u0027playing\u0027 ? Date.now() \u002B _clock_offset - start_time\n\t\t: state === \u0027paused\u0027 ? paused_progress\n\t\t: 0\n\tconst {stage: new_stage, offset_sec: new_offs} = get_current_stage(time)\n\t// state_label = state.label\n\t\n\toffset_sec = new_offs\n\tif (new_stage !== current_stage) {\n\t\tconsole.log(\u0027state changed\u0027, new_stage.label, new_stage.type === \u0027complete\u0027)\n\t\tcurrent_stage = new_stage\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (play_audio \u0026\u0026 !new_stage.no_sound) {\n\t\t\tif (current_stage.type === \u0027complete\u0027) complete_audio.play()\n\t\t\telse round_audio.play()\n\t\t}\n\t}\n}\n\nlet timer\n$: {\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tlet completed = current_stage ? current_stage.type === \u0027complete\u0027 : false\n\t// console.log(\u0027xx\u0027, state, timer, completed, current_stage)\n\n\t// if (state !== \u0027loading\u0027) tick(false)\n\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !completed) {\n\t\t// setTimeout needed to get around some weird race condition.\n\t\t// There\u0027s probably better ways to structure this :/\n\t\tsetTimeout(() =\u003E tick(false))\n\t\ttimer = setInterval(() =\u003E {\n\t\t\ttick(true)\n\t\t}, 1000)\n\t} else if ((completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tconsole.log(\u0027cancelled interval timer\u0027)\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t} else if (state === \u0027waiting\u0027 || state === \u0027paused\u0027) {\n\t\tsetTimeout(() =\u003E tick(false))\n\t}\n}\n\nlet game_completed\n$: {\n\t// console.log(\u0027updating game_completed\u0027, current_stage)\n\tgame_completed = (state !== \u0027playing\u0027 || current_stage == null) ? false\n\t: (current_stage.type === \u0027complete\u0027)\n}\n\nlet internal_state\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n\nlet bar_width = 0\n$: bar_width = current_stage == null ? 0\n\t: state === \u0027waiting\u0027 ? 0\n\t: current_stage.type === \u0027complete\u0027 ? 100\n\t: 100 * offset_sec / current_stage.duration\n\nlet stage_label\n$: stage_label = internal_state === \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n\t: current_stage == null ? \u0027unknown\u0027 : current_stage.label\n\nconst order = [\u0027meditate\u0027, \u0027bead\u0027, \u0027complete\u0027]\nconst class_for = x =\u003E x \u003C 0 ? \u0027done\u0027\n\t: x \u003E 0 ? \u0027waiting\u0027\n\t: \u0027active\u0027\n\nconst progress_class = (stage, type, r, p) =\u003E {\n\tif (stage == null) return \u0027\u0027\n\n\tconst current_o = order.indexOf(stage.type)\n\tconst element_o = order.indexOf(type)\n\n\t// const o_diff = element_o - current_o\n\treturn type === \u0027bead\u0027 \u0026\u0026 stage.type === \u0027bead\u0027\n\t\t? (r === stage.r ? class_for(p - stage.p) : class_for(r - stage.r))\n\t\t: class_for(element_o - current_o)\n}\n\n// This will get more complex in time. For now, pause the game to fiddle.\n$: settings_disabled = state === \u0027playing\u0027\n\nlet config_open = false\n\n$: if (_magister === true) config_open = true\n\n// The first user has the config open by default.\n$: if (_active_sessions === 1) config_open = true\n\n// The magister box is fully visible once there\u0027s a critical mass of players in the room\n$: magister_opaque = _magister === true || _active_sessions \u003E= 6\n\n\n\u003C/script\u003E\n\n\u003Csvelte:head\u003E\n\t{#if _magister}\n\t\t\u003Cstyle\u003E\nbody {\n\tbackground-color: var(--bg-highlight);\n}\n\t\t\u003C/style\u003E\n\t{/if}\n\u003C/svelte:head\u003E\t\n\n\u003C!-- \u003Cmain class:magister={_magister}\u003E --\u003E\n\u003Cmain\u003E\n\t\u003Caudio bind:this={round_audio} src=\u0022/lo-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\t\u003Caudio bind:this={complete_audio} src=\u0022/hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\n\t{#if internal_state === \u0027loading\u0027}\n\t\t\u003Ch1\u003ELoading game state\u003C/h1\u003E\n\t{:else}\n\t\t\u003C!-- \u003Ch1\u003EGlass Bead Game Timer\u003C/h1\u003E --\u003E\n\t\t\u003C!-- \u003Ch1\u003E{topic}\u003C/h1\u003E --\u003E\n\t\t\u003Ch1\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h1\u003E\n\t\t\u003C!-- \u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E --\u003E\n\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003E\n\n\t\t{#if !audio_works}\n\t\t\u003Cdiv\u003E\n\t\t\tAudio does not work\n\t\t\t\u003Cbutton on:click={fix_audio}\u003EFix\u003C/button\u003E\n\t\t\u003C/div\u003E\n\t\t{/if}\n\n\t// \t// a.src = \u0027/lo-metal-tone.mp3\u0027\n/silence.mlp3\t// export let state\n\nconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\n// Could make configurable. Eh.\nconst MEDITATION_SECONDS = 60\n\nlet game_stages = []\n$: {\n\tgame_stages = [{\n\t\tlabel: \u0060${meditate ? \u0027Meditation\u0027 : \u0027Game\u0027} is about to start\u0060,\n\t\tduration: 3,\n\t\tno_sound: true\n\t}]\n\tif (meditate) game_stages.push({\n\t\tlabel: \u0027Meditate\u0027,\n\t\ttype: \u0027meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\tfor (let r = 0; r \u003C rounds; r\u002B\u002B) {\n\t\tfor (let p = 0; p \u003C players; p\u002B\u002B) {\n\t\t\tgame_stages.push({\n\t\t\t\tlabel: \u0060Round ${r\u002B1} player ${p\u002B1}\u0060,\n\t\t\t\tduration: seconds_per_bead,\n\t\t\t\ttype: \u0027bead\u0027, r, p\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nconst update_state = async patch =\u003E {\n\tawait fetch(\u0060${room}/configure\u0060, {\n\t\tmethod: \u0027POST\u0027,\n\t\tmode: \u0027same-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027: \u0027application/json\u0027,\n\t\t},\n\t\tbody: JSON.stringify(patch)\n\t})\n}\n\nconst upd = (k, v) =\u003E () =\u003E update_state({[k]: v})\n\nconst config = k =\u003E e =\u003E {\n\t// console.log(\u0027k\u0027, k, e.data, e.value, e.target.value, e.target.type)\n\tconst raw_value = e.target.value\n\tconst value = e.target.type === \u0027number\u0027 ? raw_value|0\n\t\t: e.target.type === \u0027checkbox\u0027 ? e.target.checked\n\t\t: raw_value\n\tupdate_state({[k]: value})\n}\n\nconst roundish = x =\u003E Math.round(x * 10) / 10\n\n\nconst waiting_stage = { label: \u0027Waiting for game to start\u0027, duration: Infinity }\nconst complete_stage = { label: \u0027Game complete\u0027, type: \u0027complete\u0027 }\nconst get_current_stage = (offset_ms) =\u003E {\n\tif (state === \u0027waiting\u0027) return {stage: waiting_stage, offset_ms: 0}\n\n\tlet offset_sec = Math.round(offset_ms / 1000)\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet stage = game_stages[s]\n\t\tif (stage.duration \u003E offset_sec) {\n\t\t\treturn {stage, offset_sec}\n\t\t}\n\t\toffset_sec -= stage.duration\n\t}\n\treturn {\n\t\tstage: complete_stage, offset_sec\n\t}\n}\n\nlet current_stage = null, offset_sec\n$: console.log(\u0027current stage\u0027, current_stage)\n\n\nconst tick = (play_audio) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\t// console.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tconst time = state === \u0027playing\u0027 ? Date.now() \u002B _clock_offset - start_time\n\t\t: state === \u0027paused\u0027 ? paused_progress\n\t\t: 0\n\tconst {stage: new_stage, offset_sec: new_offs} = get_current_stage(time)\n\t// state_label = state.label\n\t\n\toffset_sec = new_offs\n\tif (new_stage !== current_stage) {\n\t\tconsole.log(\u0027state changed\u0027, new_stage.label, new_stage.type === \u0027complete\u0027)\n\t\tcurrent_stage = new_stage\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (play_audio \u0026\u0026 !new_stage.no_sound) {\n\t\t\tif (current_stage.type === \u0027complete\u0027) complete_audio.play()\n\t\t\telse round_audio.play()\n\t\t}\n\t}\n}\n\nlet timer\n$: {\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tlet completed = current_stage ? current_stage.type === \u0027complete\u0027 : false\n\t// console.log(\u0027xx\u0027, state, timer, completed, current_stage)\n\n\t// if (state !== \u0027loading\u0027) tick(false)\n\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !completed) {\n\t\t// setTimeout needed to get around some weird race condition.\n\t\t// There\u0027s probably better ways to structure this :/\n\t\tsetTimeout(() =\u003E tick(false))\n\t\ttimer = setInterval(() =\u003E {\n\t\t\ttick(true)\n\t\t}, 1000)\n\t} else if ((completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tconsole.log(\u0027cancelled interval timer\u0027)\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t} else if (state === \u0027waiting\u0027 || state === \u0027paused\u0027) {\n\t\tsetTimeout(() =\u003E tick(false))\n\t}\n}\n\nlet game_completed\n$: {\n\t// console.log(\u0027updating game_completed\u0027, current_stage)\n\tgame_completed = (state !== \u0027playing\u0027 || current_stage == null) ? false\n\t: (current_stage.type === \u0027complete\u0027)\n}\n\nlet internal_state\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n\nlet bar_width = 0\n$: bar_width = current_stage == null ? 0\n\t: state === \u0027waiting\u0027 ? 0\n\t: current_stage.type === \u0027complete\u0027 ? 100\n\t: 100 * offset_sec / current_stage.duration\n\nlet stage_label\n$: stage_label = internal_state === \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n\t: current_stage == null ? \u0027unknown\u0027 : current_stage.label\n\nconst order = [\u0027meditate\u0027, \u0027bead\u0027, \u0027complete\u0027]\nconst class_for = x =\u003E x \u003C 0 ? \u0027done\u0027\n\t: x \u003E 0 ? \u0027waiting\u0027\n\t: \u0027active\u0027\n\nconst progress_class = (stage, type, r, p) =\u003E {\n\tif (stage == null) return \u0027\u0027\n\n\tconst current_o = order.indexOf(stage.type)\n\tconst element_o = order.indexOf(type)\n\n\t// const o_diff = element_o - current_o\n\treturn type === \u0027bead\u0027 \u0026\u0026 stage.type === \u0027bead\u0027\n\t\t? (r === stage.r ? class_for(p - stage.p) : class_for(r - stage.r))\n\t\t: class_for(element_o - current_o)\n}\n\n// This will get more complex in time. For now, pause the game to fiddle.\n$: settings_disabled = state === \u0027playing\u0027\n\nlet config_open = false\n\n$: if (_magister === true) config_open = true\n\n// The first user has the config open by default.\n$: if (_active_sessions === 1) config_open = true\n\n// The magister box is fully visible once there\u0027s a critical mass of players in the room\n$: magister_opaque = _magister === true || _active_sessions \u003E= 6\n\n\n\u003C/script\u003E\n\n\u003Csvelte:head\u003E\n\t{#if _magister}\n\t\t\u003Cstyle\u003E\nbody {\n\tbackground-color: var(--bg-highlight);\n}\n\t\t\u003C/style\u003E\n\t{/if}\n\u003C/svelte:head\u003E\t\n\n\u003C!-- \u003Cmain class:magister={_magister}\u003E --\u003E\n\u003Cmain\u003E\n\t\u003Caudio bind:this={round_audio} src=\u0022/lo-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\t\u003Caudio bind:this={complete_audio} src=\u0022/hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\n\t{#if internal_state === \u0027loading\u0027}\n\t\t\u003Ch1\u003ELoading game state\u003C/h1\u003E\n\t{:else}\n\t\t\u003C!-- \u003Ch1\u003EGlass Bead Game Timer\u003C/h1\u003E --\u003E\n\t\t\u003C!-- \u003Ch1\u003E{topic}\u003C/h1\u003E --\u003E\n\t\t\u003Ch1\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h1\u003E\n\t\t\u003C!-- \u003Ch4\u003ETopic: \u003Cem\u003E{topic}\u003C/em\u003E\u003C/h4\u003E --\u003E\n\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003E\n\n\timport * as topics from \u0027./topics.json\u0027\nconsole.loglog(topics)\n\t\t\n\t\t\u003Cimg\u003E\u003C/img\u003E id= /\u0027asdftopic\u0027\n\t\t\n\n$: {\n\t\n\t}\tbind:this={round_audio}topic_img\nlet topic_img\ttopic_imgdiv\u003C/div\u003E/.innerHTML = topics[topictopic.toLos.toLocaleLowerCase())]SVGsIconstopicIconsif (topic_img)  id=tipopicimg\u0027\u0027\n\n#topicimg {\n\t}\n\twidthmax-width: 200px;\n\t\t\n\t\t\u003Cdetailsdetails\u003E\u003C/details\u003E\n\t\t\t\n\t\t\u003Csummary\u003EUIOther stuff\u003C/su/summary\u003E\u003E\n\t\t\t\n\t\t\u003Cdiv id=\u0027rounds\u0027\u003E\n\t\t\t\u003Ch2\u003EGame\u003C/h2\u003E\n\t\t\t{#if meditate}\n\t\t\t\t\u003Cdiv\u003E\n\t\t\t\t\t\u003Cspan class={progress_class(current_stage, \u0027meditate\u0027)}\u003EMeditation (1 min)\u003C/span\u003E\n\t\t\t\t\u003C/div\u003E\n\t\t\t{/if}\n\t\t\t{#each Array(Math.max(rounds, 0)) as _, r}\n\t\t\t\t\u003Cdiv\u003ERound {r\u002B1}:\n\t\t\t\t\t{#each Array(Math.max(players, 0)) as _, p}\n\t\t\t\t\t\t\u003Cspan class={\u0027bead \u0027 \u002B progress_class(current_stage, \u0027bead\u0027, r, p)}\u003E{p\u002B1} \u003C/span\u003E\n\t\t\t\t\t{/each}\n\t\t\t\t\u003C/div\u003E\n\t\t\t{/each}\n\t\t\u003C/div\u003E\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003Cdiv\u003E\n\t\t\t{state === \u0027waiting\u0027 ? \u0027Waiting for the game to start\u0027\n\t\t\t: state === \u0027paused\u0027 ? \u0027GAME PAUSED\u0027\n\t\t\t: state === \u0027playing\u0027 ? \u0027Game in progress\u0027\n\t\t\t: \u0027\u0027}\n\t\t\u003C/div\u003E\n\t\t{#if connection !== \u0027connected\u0027}\n\t\t\t\u003Cdiv\u003EDISCONNECTED FROM GAME SERVER\u003C/div\u003E\n\t\t{:else}\n\t\t\t{#if _active_sessions == 1}\n\t\t\t\t\u003Cdiv\u003EYou are alone in the room\u003C/div\u003E\n\t\t\t{:else}\n\t\t\t\t\u003Cdiv\u003E{_active_sessions} players are in this room\u003C/div\u003E\n\t\t\t{/if}\n\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\u003C!-- I\u0027m not ready to delete these UI elements but we might not use them --\u003E\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003E\n\t\t\t\n\t\t\t\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t\t_magister == null || _magister == true \u0026\u0026 )(\t\n\t\t\t\u003C{/if}\t\tAdvanced// // \n\ttext-align: cencenter;\n\t\t\u003Cvspdiv classstyle=\u0027\u0027\u003E\u003C/div\u003Eheoghight: 400px;\n\tdisplay: inline-bloinline-block;3\n\t\t\t\n\t\t\t\t\t\u003Ch1\u003E{topic}\u003C/h1\u003E\t\t\t\u003Cscript lang=\u0022ts\u0022\u003E\nimport type { HtmlTag } from \u0027svelte/internal\u0027;\nimport type { GameConfig } from \u0027./shared\u0027;\n\nimport * as topicIcons from \u0027./topics.json\u0027\n\nexport let room: string\n\nexport let connection: \u0027waiting\u0027 | \u0027connecting\u0027 | \u0027connected\u0027\n\nexport let game_config: GameConfig\n// export let state // loading, waiting, playing, paused.\n// export let start_time\n// export let topic\n// export let meditate\n// export let players\n// export let rounds\n// export let seconds_per_bead\n// export let paused_progress\n\nexport let _active_sessions: number\nexport let _magister: true | null\nexport let _clock_offset: number\n\n// let game_completed = false // Derived from other properties\n\nlet round_audio: HTMLAudioElement\nlet complete_audio: HTMLAudioElement\nlet topic_img: HTMLElement\n\nlet state: GameConfig[\u0027state\u0027]\n$: state = game_config.state\n\n$: console.log(\u0027Game configuration changed\u0027, game_config)\n\n\t// export let state\n\nconst ARCHETOPICS = [\n  \u0027Truth\u0027, \u0027Human\u0027, \u0027Energy\u0027, \u0027Beauty\u0027, \u0027Beginning\u0027, \u0027End\u0027, \u0027Birth\u0027, \u0027Death\u0027,\n  \u0027Ego\u0027, \u0027Attention\u0027, \u0027Art\u0027, \u0027Empathy\u0027, \u0027Eutopia\u0027, \u0027Future\u0027, \u0027Game\u0027, \u0027Gift\u0027,\n  \u0027History\u0027, \u0027Cosmos\u0027, \u0027Time\u0027, \u0027Life\u0027, \u0027Addiction\u0027, \u0027Paradox\u0027, \u0027Shadow\u0027, \u0027Society\u0027\n]\n\n$: {\n\tif (topic_img) {\n\t\tconst svgContent = topicIcons[game_config.topic.toLocaleLowerCase() as keyof typeof topicIcons]\n\t\tif (svgContent) topic_img.innerHTML = svgContent\n\t}\n}\n\n// Could make configurable. Eh.\nconst MEDITATION_SECONDS = 60\n\ninterface GameStage {\n\tlabel: string,\n\ttype: \u0027waiting\u0027 | \u0027bead\u0027 | \u0027meditate\u0027 | \u0027contemplation\u0027 | \u0027complete\u0027,\n\tduration: number,\n\tno_sound?: true,\n\tr?: number, p?: number\n}\n\nlet game_stages: GameStage[] = []\n$: {\n\tgame_stages = [{\n\t\tlabel: \u0060${game_config.meditate ? \u0027Meditation\u0027 : \u0027Game\u0027} is about to start\u0060,\n\t\ttype: \u0027waiting\u0027,\n\t\tduration: 3,\n\t\tno_sound: true\n\t}]\n\tif (game_config.meditate) game_stages.push({\n\t\tlabel: \u0027Meditate\u0027,\n\t\ttype: \u0027meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\tfor (let r = 0; r \u003C game_config.rounds; r\u002B\u002B) {\n\t\tfor (let p = 0; p \u003C game_config.players; p\u002B\u002B) {\n\t\t\tif (game_config.seconds_between_bead \u0026\u0026 (r \u003E 0 || p \u003E 0)) game_stages.push({\n\t\t\t\tlabel: \u0027Breathe\u0027,\n\t\t\t\tduration: game_config.seconds_between_bead,\n\t\t\t\ttype: \u0027bead\u0027\n\t\t\t})\n\n\t\t\tgame_stages.push({\n\t\t\t\tlabel: game_config.players \u003E 1 ? \u0060Round ${r\u002B1} player ${p\u002B1}\u0060 : \u0060Round ${r\u002B1}\u0060,\n\t\t\t\tduration: game_config.seconds_per_bead,\n\t\t\t\ttype: \u0027bead\u0027, r, p\n\t\t\t})\n\t\t}\n\t}\n\n\tif (game_config.contemplation) game_stages.push({\n\t\tlabel: \u0022Contemplate the game\u0027s passing\u0022,\n\t\ttype: \u0027contemplation\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\n\tconsole.log(\u0027game stages\u0027, game_stages, game_config.seconds_between_bead)\n}\n\n// TODO: The protocol for these update methods doesn\u0027t use game_state properly.\nconst update_state = async (patch: Record\u003Cstring, string | number | boolean | null\u003E) =\u003E {\n\tawait fetch(\u0060${room}/configure\u0060, {\n\t\tmethod: \u0027POST\u0027,\n\t\tmode: \u0027same-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027: \u0027application/json\u0027,\n\t\t},\n\t\tbody: JSON.stringify(patch)\n\t})\n}\n\nconst upd = (k: string, v: string | number | boolean | null) =\u003E () =\u003E update_state({[k]: v})\n\nconst config = (k: string): svelte.JSX.FormEventHandler\u003CHTMLInputElement\u003E =\u003E (e) =\u003E {\n\t// console.log(\u0027k\u0027, k, e.data, e.value, e.target.value, e.target.type)\n\tconst target = e.target as HTMLInputElement\n\tconst raw_value = target.value\n\tconst value = target.type === \u0027number\u0027 ? ~~raw_value\n\t\t: target.type === \u0027checkbox\u0027 ? target.checked\n\t\t: raw_value\n\tupdate_state({[k]: value})\n}\n\nconst roundish = (x: number) =\u003E Math.round(x * 10) / 10\n\n\nconst waiting_stage: GameStage = { label: \u0027Waiting for game to start\u0027, type: \u0027waiting\u0027, duration: Infinity }\nconst complete_stage: GameStage = { label: \u0027Game complete\u0027, type: \u0027complete\u0027, duration: Infinity }\nconst get_current_stage = (offset_ms: number): {stage: GameStage, offset_sec: number} =\u003E {\n\tif (state === \u0027waiting\u0027) return {stage: waiting_stage, offset_sec: 0}\n\n\tlet offset_sec = Math.round(offset_ms / 1000)\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet stage = game_stages[s]\n\t\tif (stage.duration \u003E offset_sec) {\n\t\t\treturn {stage, offset_sec}\n\t\t}\n\t\toffset_sec -= stage.duration\n\t}\n\treturn {\n\t\tstage: complete_stage, offset_sec\n\t}\n}\n\nlet current_stage: GameStage | null = null, offset_sec: number\n$: console.log(\u0027current stage\u0027, current_stage)\n\n\nconst tick = (play_audio: boolean) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\t// console.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tconst time = state === \u0027playing\u0027 ? Date.now() \u002B _clock_offset - game_config.start_time\n\t\t: state === \u0027paused\u0027 ? game_config.paused_progress!\n\t\t: 0\n\tconst {stage: new_stage, offset_sec: new_offs} = get_current_stage(time)\n\t// state_label = state.label\n\n\toffset_sec = new_offs\n\tif (new_stage !== current_stage) {\n\t\tconsole.log(\u0027state changed\u0027, new_stage.label, new_stage.type === \u0027complete\u0027)\n\t\tcurrent_stage = new_stage\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (play_audio \u0026\u0026 !new_stage.no_sound) {\n\t\t\tif (current_stage.type === \u0027complete\u0027 || current_stage.type === \u0027contemplation\u0027) complete_audio.play()\n\t\t\telse round_audio.play()\n\t\t}\n\t}\n}\n\nlet timer: number | null\n$: {\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tlet completed = current_stage ? current_stage.type === \u0027complete\u0027 : false\n\t// console.log(\u0027xx\u0027, state, timer, completed, current_stage)\n\n\t// if (state !== \u0027loading\u0027) tick(false)\n\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !completed) {\n\t\t// setTimeout needed to get around some weird race condition.\n\t\t// There\u0027s probably better ways to structure this :/\n\t\tsetTimeout(() =\u003E tick(false))\n\t\ttimer = setInterval(() =\u003E {\n\t\t\ttick(true)\n\t\t}, 1000)\n\t} else if ((completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tconsole.log(\u0027cancelled interval timer\u0027)\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t} else if (state === \u0027waiting\u0027 || state === \u0027paused\u0027) {\n\t\tsetTimeout(() =\u003E tick(false))\n\t}\n}\n\nlet game_completed: boolean\n$: {\n\t// console.log(\u0027updating game_completed\u0027, current_stage)\n\tgame_completed = (state !== \u0027playing\u0027 || current_stage == null) ? false\n\t: (current_stage.type === \u0027complete\u0027)\n}\n\nlet internal_state: GameConfig[\u0027state\u0027] | \u0027completed\u0027\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n\nlet bar_width = 0\n$: bar_width = current_stage == null ? 0\n\t: state === \u0027waiting\u0027 ? 0\n\t: current_stage.type === \u0027complete\u0027 ? 100\n\t: 100 * offset_sec / current_stage.duration\n\nlet stage_label: string\n$: stage_label = internal_state === \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n\t: current_stage == null ? \u0027unknown\u0027 : current_stage.label\n\n// const order = [\u0027meditate\u0027, \u0027bead\u0027, \u0027complete\u0027]\n// const class_for = (x: number): string =\u003E x \u003C 0 ? \u0027done\u0027\n// \t: x \u003E 0 ? \u0027waiting\u0027\n// \t: \u0027active\u0027\n\n// const progress_class = (stage: GameStage, type: string, r?: number, p?: number): string =\u003E {\n// \tif (stage == null) return \u0027\u0027\n\n// \tconst current_o = order.indexOf(stage.type)\n// \tconst element_o = order.indexOf(type)\n\n// \t// const o_diff = element_o - current_o\n// \treturn type === \u0027bead\u0027 \u0026\u0026 stage.type === \u0027bead\u0027\n// \t\t? (r === stage.r ? class_for(p - stage.p) : class_for(r - stage.r))\n// \t\t: class_for(element_o - current_o)\n// }\n\n// This will get more complex in time. For now, pause the game to fiddle.\n$: settings_disabled = state === \u0027playing\u0027\n\nlet config_open = false\n\n$: if (_magister === true) config_open = true\n\n// The first user has the config open by default.\n// $: if (_active_sessions === 1) config_open = true\n\n// The magister box is fully visible once there\u0027s a critical mass of players in the room\n$: magister_opaque = _magister === true || _active_sessions \u003E= 6\n\n\u003C/script\u003E\n\n\u003Csvelte:head\u003E\n\t{#if _magister}\n\t\t\u003Cstyle\u003E\nbody {\n\tbackground-color: var(--bg-highlight);\n}\n\t\t\u003C/style\u003E\n\t{/if}\n\u003C/svelte:head\u003E\n\n\u003C!-- \u003Cmain class:magister={_magister}\u003E --\u003E\n\u003Cmain\u003E\n\t\u003Caudio bind:this={round_audio} src=\u0022/lo-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\t\u003Caudio bind:this={complete_audio} src=\u0022/hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\n\t{#if internal_state === \u0027loading\u0027}\n\t\t\u003Ch1\u003ELoading game state\u003C/h1\u003E\n\t{:else}\n\t\t\u003C!-- \u003Ch1\u003EGlass Bead Game Timer\u003C/h1\u003E --\u003E\n\t\t\u003C!-- \u003Ch1\u003E{topic}\u003C/h1\u003E --\u003E\n\n\t\t\u003Cdiv id=\u0027topicimg\u0027 bind:this={topic_img}\u003E{game_config.topic}\u003C/div\u003E\n\n\t\t\u003Ch1\u003E{stage_label}\u003C/h1\u003E\n\t\t\u003Cdiv id=\u0027progresscontainer\u0027\u003E\n\t\t\t\u003Cdiv id=\u0027progress_time\u0027\u003E{((internal_state === \u0027playing\u0027 || internal_state === \u0027paused\u0027) \u0026\u0026 current_stage) ? current_stage.duration - offset_sec : \u0027\u0027}\u003C/div\u003E\n\t\t\t\u003Cdiv id=\u0027progress\u0027 style=\u0027width: {bar_width}%\u0027\u003E\u003C/div\u003E\n\t\t\u003C/div\u003E\n\n\t\t{#if (_magister == null || _magister == true)}\n\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t\t{/if}\n\t\t{/if}\n\n\t\t\u003Cdiv style=\u0027height: 400px;\u0027\u003E\u003C/div\u003E\n\n\t\t\u003Cdetails\u003E\n\t\t\t\u003C!-- I\u0027m not ready to delete these UI elements but we might not use them --\u003E\n\t\t\t\u003Csummary\u003EInfo\u003C/summary\u003E\n\n\t\t\t\u003Ch1\u003E{game_config.topic}\u003C/h1\u003E\n\t\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003E\n\n\t\t\t\u003Cdiv\u003E\n\t\t\t\t{state === \u0027waiting\u0027 ? \u0027Waiting for the game to start\u0027\n\t\t\t\t: state === \u0027paused\u0027 ? \u0027GAME PAUSED\u0027\n\t\t\t\t: state === \u0027playing\u0027 ? \u0027Game in progress\u0027\n\t\t\t\t: \u0027\u0027}\n\t\t\t\u003C/div\u003E\n\t\t\t{#if connection !== \u0027connected\u0027}\n\t\t\t\t\u003Cdiv\u003EDISCONNECTED FROM GAME SERVER\u003C/div\u003E\n\t\t\t{:else}\n\t\t\t\t{#if _active_sessions == 1}\n\t\t\t\t\t\u003Cdiv\u003EYou are alone in the room\u003C/div\u003E\n\t\t\t\t{:else}\n\t\t\t\t\t\u003Cdiv\u003E{_active_sessions} players are in this room\u003C/div\u003E\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\n\t\t\t\u003Cdiv id=\u0027rounds\u0027\u003E\n\t\t\t\t\u003Ch2\u003EGame\u003C/h2\u003E\n\t\t\t\t{#if game_config.meditate}\n\t\t\t\t\t\u003Cdiv\u003E\n\t\t\t\t\t\t\u003C!-- \u003Cspan class={progress_class(current_stage, \u0027meditate\u0027)}\u003EMeditation (1 min)\u003C/span\u003E --\u003E\n\t\t\t\t\t\t\u003Cspan\u003EMeditation (1 min)\u003C/span\u003E\n\t\t\t\t\t\u003C/div\u003E\n\t\t\t\t{/if}\n\t\t\t\t{#each Array(Math.max(game_config.rounds, 0)) as _, r}\n\t\t\t\t\t\u003Cdiv\u003ERound {r\u002B1}:\n\t\t\t\t\t\t{#each Array(Math.max(game_config.players, 0)) as _, p}\n\t\t\t\t\t\t\t\u003C!-- \u003Cspan class={\u0027bead \u0027 \u002B progress_class(current_stage, \u0027bead\u0027, r, p)}\u003E{p\u002B1} \u003C/span\u003E --\u003E\n\t\t\t\t\t\t\t\u003Cspan\u003E{p\u002B1} \u003C/span\u003E\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t\u003C/div\u003E\n\t\t\t\t{/each}\n\t\t\t\u003C/div\u003E\n\t\n\t\t\u003C/details\u003E\n\n\t\t{#if _magister == null || _magister == true}\n\t\t\t\u003Cdetails class=\u0027config\u0027 bind:open={config_open}\u003E\n\t\t\t\t\u003Csummary\u003EGame controls\u003C/summary\u003E\n\n\t\t\t\t\u003Cp\u003E\n\t\t\t\t\t{#if _magister == null}\n\t\t\t\t\t\tThis will effect all players. Will you borrow power? Will you steal it?\n\t\t\t\t\t{:else}\n\t\t\t\t\t\tYou are master of the games. These controls are yours alone.\n\t\t\t\t\t{/if}\n\t\t\t\t\u003C/p\u003E\n\n\t\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t\t\t{/if}\n\n\t\t\t\t{#if internal_state == \u0027paused\u0027 || internal_state == \u0027completed\u0027 }\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027waiting\u0027)}\u003ERestart game\u003C/button\u003E\n\t\t\t\t{/if}\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ETopic\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027text\u0027 value={game_config.topic} on:input={config(\u0027topic\u0027)} list=\u0027archetopics\u0027 \u003E\n\t\t\t\t\t\u003Cdatalist id=\u0027archetopics\u0027\u003E\n\t\t\t\t\t\t{#each ARCHETOPICS as topic}\n\t\t\t\t\t\t\t\u003Coption value={topic}\u003E\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t\u003C/datalist\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003EPre-game meditation\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027checkbox\u0027 checked={game_config.meditate} on:input={config(\u0027meditate\u0027)} \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003EPost game contemplation\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027checkbox\u0027 checked={game_config.contemplation} on:input={config(\u0027contemplation\u0027)} \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ENumber of players\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.players} on:input={config(\u0027players\u0027)} min=1 max=12 \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ENumber of rounds\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.rounds} on:input={config(\u0027rounds\u0027)} min=1 max=20\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ESeconds per bead\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.seconds_per_bead} on:input={config(\u0027seconds_per_bead\u0027)}\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ESeconds between beads\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.seconds_between_bead} on:input={config(\u0027seconds_between_bead\u0027)}\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Cdiv style=\u0027margin-top: 1em;\u0027\u003E\n\t\t\t\t\t(Total game length: {roundish(\n\t\t\t\t\t\tgame_stages.reduce((x, s) =\u003E x \u002B s.duration, 0) / 60\n\t\t\t\t\t)} minutes)\n\t\t\t\t\u003C/div\u003E\n\n\t\t\t\t\u003Cdiv id=\u0027magister_box\u0027 class:magister_opaque\u003E\n\t\t\t\t\t{#if _magister == null}\n\t\t\t\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, true)}\u003EAssume the mantle of Magister Ludi\u003C/button\u003E\n\t\t\t\t\t\t\u003Cp\u003E\u003Ci\u003EAdvanced - for large games\u003C/i\u003E\u003C/p\u003E\n\t\t\t\t\t\t\u003Cp\u003EWhen present, the Magister Ludi (master of the games) has exclusive control of the game.\u003C/p\u003E\n\t\t\t\t\t{:else if _magister == true}\n\t\t\t\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, null)}\u003EAbdicate Magister Ludi status\u003C/button\u003E\n\t\t\t\t\t\t\u003Cp\u003EYou are the master of the games. You have exclusive control over playing, pausing and configuring this game.\u003C/p\u003E\n\t\t\t\t\t\t\u003Cp\u003EDo not close this browser window or you will be dethroned.\u003C/p\u003E\n\t\t\t\t\t{/if}\n\t\t\t\t\u003C/div\u003E\n\t\t\t\u003C/details\u003E\n\t\t{:else}\n\t\t\t\u003Cp class=\u0027config\u0027\u003EMagister Ludi is managing this game.\u003C/p\u003E\n\t\t{/if}\n\t{/if}\n\u003C/main\u003E\n\n\u003Cstyle\u003E\n\nmain {\n\t/* margin-bottom: 3em; */\n\ttext-align: center;\n}\n\n#topicimg {\n\twidth: 300px;\n\tdisplay: inline-block;\n}\n\n/* .magister {\n\tbackground-color: var(--bg-highlight);\n} */\n\nh1 {\n\tmargin-top: 1em;\n}\n\n#progresscontainer {\n\t/* width: calc(100% - 50px); */\n\tposition: relative;\n\tmargin: 25px;\n\theight: 5em;\n\tborder: 2px solid var(--fg-color);\n}\n\n#progress_time {\n\tposition: absolute;\n\t/* color: red; */\n\t/* font-size: var(--bg-color); */\n\tcolor: white;\n\t/* color: white; */\n\tfont-size: 54px;\n\tmargin-left: 5px;\n\tmix-blend-mode: difference;\n}\n\n#progress {\n\tbackground-color: var(--fg-color);\n\t/* width: 50%; */\n\theight: 100%;\n\t/* transition: width 1s linear; */\n}\n\n\n/* .bead {\n\tmargin-right: 1em;\n\tpadding: 2px 4px;\n}\n.done {\n\ttext-decoration: line-through;\n\tcolor: #888;\n} */\n/* .waiting {\n\tcolor: #888;\n} */\n/* .active {\n\tbackground-color: var(--fg-color);\n\tcolor: var(--bg-color);\n} */\n\n/***** Game config *****/\n.config {\n\tmargin-top: 2em;\n}\n\nsummary {\n\ttext-decoration: underline;\n\tcursor: pointer;\n}\n\nbutton {\n\tfont-size: 140%;\n\tmargin: 10px 0;\n\tcolor: var(--bg-color);\n\t/* color: var(--fg-color); */\n}\n\ndetails \u003E :first-child {\n\tmargin-bottom: 1em;\n}\n\nlabel {\n\tmargin-bottom: 3px;\n}\nlabel \u003E :first-child {\n\tdisplay: inline-block;\n\tmin-width: 14em;\n}\n\ninput {\n\twidth: 7em;\n\tfont-size: 16px;\n\t/* color: var(--bg-color); */\n\tborder: 2px solid #686868;\n}\n\ninput[type=checkbox] {\n\theight: 1em;\n}\n\nlabel {\n\tdisplay: block;\n}\n\n#magister_box {\n\tborder: 1px dashed var(--fg-color);\n\t/* margin: 1em 0; */\n\tmargin: 1em auto;\n",",\n\tid: string?,\n\t\t\t\tid: \u0060${r} ${p}\u0060s  | any // Timeout? \u0026\u0026 \n\t\tlet changed = new_stage == null || current_stacurrent_stage == null || new_stage.id !== currcurrent_stage.id\n\t\t// Hotfix \u0026\u0026 cheanged null | |  \\\\ == null || current_stage.id == null !== new_stage.id \n\t\tconsole.log(new_stage, current_stage, changed)\n\t\t\n\t\t\t\t// Hotfix\n\t\tlet changed = new_stage == null || current_stage == null || new_stage.id == null || current_stage.id == null || current_stage.id !== new_stage.id\n\t\tconsole.log(new_stage, current_stage, changed)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: game_config.players \u003E 1 ? \u0060Round ${r\u002B1} player ${p\u002B1}\u0060 : \u0060Round ${r\u002B1}\u0060,\n// \u0027\u0027\t\t\t\tlabel: game_config.players \u003E 1 ? \u0060Round ${r\u002B1} player ${p\u002B1}\u0060 : \u0060Round ${r\u002B1}\u0060,\n\ttype: \u0027waiting\u0027 | \u0027bead\u0027 | \u0027breath\u0027 | \u0027meditate\u0027 | \u0027contemplation\u0027 | \u0027complete\u0027,\n\tduration: number,\n\tno_sound?: true,\n\tr?: number, p?: number,\n\tid?: string\n}\n\nlet game_stages: GameStage[] = []\n$: {\n\tgame_stages = [{\n\t\tlabel: \u0060${game_config.meditate ? \u0027Meditation\u0027 : \u0027Game\u0027} is about to start\u0060,\n\t\ttype: \u0027waiting\u0027,\n\t\tduration: 3,\n\t\tno_sound: true\n\t}]\n\tif (game_config.meditate) game_stages.push({\n\t\tlabel: \u0027Meditate\u0027,\n\t\ttype: \u0027meditate\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\tfor (let r = 0; r \u003C game_config.rounds; r\u002B\u002B) {\n\t\tfor (let p = 0; p \u003C game_config.players; p\u002B\u002B) {\n\t\t\tif (game_config.seconds_between_bead \u0026\u0026 (r \u003E 0 || p \u003E 0)) game_stages.push({\n\t\t\t\tlabel: \u0027Breathe\u0027,\n\t\t\t\tduration: game_config.seconds_between_bead,\n\t\t\t\ttype: \u0027breath\u0027,\n\t\t\t\tid: \u0060b ${r} ${p}\u0060\n\t\t\t})\n\n\t\t\tgame_stages.push({\n\t\t\t\tlabel: game_config.players \u003E 1 ? \u0060Round ${r\u002B1} player ${p\u002B1}\u0060 : \u0060Round ${r\u002B1}\u0060,\n\t\t\t\tduration: game_config.seconds_per_bead,\n\t\t\t\ttype: \u0027bead\u0027, r, p,\n\t\t\t\tid: \u0060s ${r} ${p}\u0060\n\t\t\t})\n\t\t}\n\t}\n\n\tif (game_config.contemplation) game_stages.push({\n\t\tlabel: \u0022Contemplate the game\u0027s passing\u0022,\n\t\ttype: \u0027contemplation\u0027,\n\t\tduration: MEDITATION_SECONDS,\n\t})\n\n\n\tconsole.log(\u0027game stages\u0027, game_stages, game_config.seconds_between_bead)\n}\n\nlet total_game_length: number\n$: total_game_length = game_stages.reduce((x, s) =\u003E x \u002B s.duration, 0)\n\n// Used for the overall game progress indicator.\nlet inner_game_stages: GameStage[]\n$: inner_game_stages = game_stages.filter(s =\u003E s.type === \u0027breath\u0027 || s.type === \u0027bead\u0027)\nlet inner_game_length: number\n$: inner_game_length = inner_game_stages.reduce((x, s) =\u003E x \u002B s.duration, 0)\n\n// TODO: The protocol for these update methods doesn\u0027t use game_state properly.\nconst update_state = async (patch: Record\u003Cstring, string | number | boolean | null\u003E) =\u003E {\n\tawait fetch(\u0060${room}/configure\u0060, {\n\t\tmethod: \u0027POST\u0027,\n\t\tmode: \u0027same-origin\u0027,\n\t\theaders: {\n\t\t\t\u0027content-type\u0027: \u0027application/json\u0027,\n\t\t},\n\t\tbody: JSON.stringify(patch)\n\t})\n}\n\nconst upd = (k: string, v: string | number | boolean | null) =\u003E () =\u003E update_state({[k]: v})\n\nconst config = (k: string): svelte.JSX.FormEventHandler\u003CHTMLInputElement\u003E =\u003E (e) =\u003E {\n\t// console.log(\u0027k\u0027, k, e.data, e.value, e.target.value, e.target.type)\n\tconst target = e.target as HTMLInputElement\n\tconst raw_value = target.value\n\tconst value = target.type === \u0027number\u0027 ? ~~raw_value\n\t\t: target.type === \u0027checkbox\u0027 ? target.checked\n\t\t: raw_value\n\tupdate_state({[k]: value})\n}\n\nconst roundish = (x: number) =\u003E Math.round(x * 10) / 10\n\n\nconst waiting_stage: GameStage = { label: \u0027Waiting for game to start\u0027, type: \u0027waiting\u0027, duration: Infinity }\nconst complete_stage: GameStage = { label: \u0027Game complete\u0027, type: \u0027complete\u0027, duration: Infinity }\nconst get_current_stage = (offset_ms: number): {stage: GameStage, stage_idx: number, offset_sec: number} =\u003E {\n\tif (state === \u0027waiting\u0027) return {stage: waiting_stage, stage_idx: -1, offset_sec: 0}\n\n\tlet offset_sec = Math.round(offset_ms / 1000)\n\tfor (let s = 0; s \u003C game_stages.length; s\u002B\u002B) {\n\t\tlet stage = game_stages[s]\n\t\tif (stage.duration \u003E offset_sec) {\n\t\t\treturn {stage, stage_idx: s, offset_sec}\n\t\t}\n\t\toffset_sec -= stage.duration\n\t}\n\treturn {\n\t\tstage: complete_stage, stage_idx: game_stages.length, offset_sec\n\t}\n}\n\n// Urgh kinda ugly storing state for both the index and stage itself. Better to\n// have one derive the other.\nlet current_stage: GameStage | null = null, current_stage_idx: number = -1, offset_sec: number\n$: console.log(\u0027current stage\u0027, current_stage)\n// $: console.log(\u0027idx\u0027, current_stage_idx)\n\nconst tick = (play_audio: boolean) =\u003E {\n\tconsole.log(\u0027tick\u0027)\n\t// console.log(\u0027state\u0027, state, \u0027completed\u0027, state \u0026\u0026 state.complete)\n\n\tconst time = state === \u0027playing\u0027 ? Date.now() \u002B _clock_offset - game_config.start_time\n\t\t: state === \u0027paused\u0027 ? game_config.paused_progress!\n\t\t: 0\n\tconst {stage: new_stage, stage_idx: new_stage_idx, offset_sec: new_offs} = get_current_stage(time)\n\t// state_label = state.label\n\n\toffset_sec = new_offs\n\tif (new_stage !== current_stage) {\n\t\tconsole.log(\u0027state changed\u0027, new_stage.label, new_stage.type === \u0027complete\u0027)\n\n\t\t// This happens sometimes with other kinds of configuration changes -\n\t\t// eg if a user enters or leaves the room, or the room is reconfigured.\n\t\t// Only make a sound if the *stage* changes.\n\t\tlet changed = current_stage == null || (new_stage.id ?? new_stage.type) !== (current_stage.id ?? current_stage.type)\n\t\t// console.log(new_stage, current_stage, changed)\n\n\t\tcurrent_stage = new_stage\n\t\tcurrent_stage_idx = new_stage_idx\n\t\t// completed = new_game_state.complete\n\t\t// if (!state.complete) round_audio.play()\n\n\t\tif (play_audio \u0026\u0026 !new_stage.no_sound \u0026\u0026 changed) {\n\t\t\tif (current_stage.type === \u0027complete\u0027 || current_stage.type === \u0027contemplation\u0027) complete_audio.play()\n\t\t\telse round_audio.play()\n\t\t}\n\t}\n}\n\nlet timer: number | null | any // Timeout?\n$: {\n\t// Sadly we can\u0027t use internal_state here because it generates a cyclic dependancy.\n\tlet completed = current_stage ? current_stage.type === \u0027complete\u0027 : false\n\t// console.log(\u0027xx\u0027, state, timer, completed, current_stage)\n\n\t// if (state !== \u0027loading\u0027) tick(false)\n\n\tif (state === \u0027playing\u0027 \u0026\u0026 timer == null \u0026\u0026 !completed) {\n\t\t// setTimeout needed to get around some weird race condition.\n\t\t// There\u0027s probably better ways to structure this :/\n\t\tsetTimeout(() =\u003E tick(false))\n\t\ttimer = setInterval(() =\u003E {\n\t\t\ttick(true)\n\t\t}, 1000)\n\t} else if ((completed || state !== \u0027playing\u0027) \u0026\u0026 timer != null) {\n\t\tconsole.log(\u0027cancelled interval timer\u0027)\n\t\tclearInterval(timer)\n\t\ttimer = null\n\t} else if (state === \u0027waiting\u0027 || state === \u0027paused\u0027) {\n\t\tsetTimeout(() =\u003E tick(false))\n\t}\n}\n\nlet game_completed: boolean\n$: {\n\t// console.log(\u0027updating game_completed\u0027, current_stage)\n\tgame_completed = (state !== \u0027playing\u0027 || current_stage == null) ? false\n\t: (current_stage.type === \u0027complete\u0027)\n}\n\nlet internal_state: GameConfig[\u0027state\u0027] | \u0027completed\u0027\n$: internal_state = game_completed ? \u0027completed\u0027 : state\n\nlet bar_width = 0\n$: bar_width = current_stage == null ? 0\n\t: state === \u0027waiting\u0027 ? 0\n\t: current_stage.type === \u0027complete\u0027 ? 100\n\t: 100 * offset_sec / current_stage.duration\n\nlet stage_label: string\n$: stage_label = internal_state === \u0027waiting\u0027 ? \u0027Waiting for game to start\u0027\n\t: current_stage == null ? \u0027unknown\u0027 : current_stage.label\n\n\nconst progress_class = (stage_idx: number, baseline_idx: number): \u0027s-done\u0027 | \u0027s-active\u0027 | \u0027s-waiting\u0027 =\u003E {\n\tif (current_stage == null || baseline_idx \u003C 0) return \u0027s-waiting\u0027\n\n\treturn stage_idx \u003C baseline_idx ? \u0027s-done\u0027\n\t\t: stage_idx === baseline_idx ? \u0027s-active\u0027\n\t\t: \u0027s-waiting\u0027\n}\n\n// const order = [\u0027meditate\u0027, \u0027bead\u0027, \u0027complete\u0027]\n// const class_for = (x: number): string =\u003E x \u003C 0 ? \u0027done\u0027\n// \t: x \u003E 0 ? \u0027waiting\u0027\n// \t: \u0027active\u0027\n\n// const progress_class = (stage: GameStage, type: string, r?: number, p?: number): string =\u003E {\n// \tif (stage == null) return \u0027\u0027\n\n// \tconst current_o = order.indexOf(stage.type)\n// \tconst element_o = order.indexOf(type)\n\n// \t// const o_diff = element_o - current_o\n// \treturn type === \u0027bead\u0027 \u0026\u0026 stage.type === \u0027bead\u0027\n// \t\t? (r === stage.r ? class_for(p - stage.p) : class_for(r - stage.r))\n// \t\t: class_for(element_o - current_o)\n// }\n\n// This will get more complex in time. For now, pause the game to fiddle.\n$: settings_disabled = state === \u0027playing\u0027\n\nlet config_open = false\n\n$: if (_magister === true) config_open = true\n\n// The first user has the config open by default.\n// $: if (_active_sessions === 1) config_open = true\n\n// The magister box is fully visible once there\u0027s a critical mass of players in the room\n$: magister_opaque = _magister === true || _active_sessions \u003E= 6\n\n\u003C/script\u003E\n\n\u003Csvelte:head\u003E\n\t{#if _magister}\n\t\t\u003Cstyle\u003E\nbody {\n\tbackground-color: var(--bg-highlight);\n}\n\t\t\u003C/style\u003E\n\t{/if}\n\u003C/svelte:head\u003E\n\n\u003C!-- \u003Cmain class:magister={_magister}\u003E --\u003E\n\u003Cmain\u003E\n\t\u003Caudio bind:this={round_audio} src=\u0022/lo-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\t\u003Caudio bind:this={complete_audio} src=\u0022/hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\n\t{#if internal_state === \u0027loading\u0027}\n\t\t\u003Ch1\u003ELoading game state\u003C/h1\u003E\n\t{:else}\n\t\t\u003C!-- \u003Ch1\u003EGlass Bead Game Timer\u003C/h1\u003E --\u003E\n\t\t\u003C!-- \u003Ch1\u003E{topic}\u003C/h1\u003E --\u003E\n\n\t\t\u003Cdiv id=\u0027topicimg\u0027 bind:this={topic_img}\u003E{game_config.topic}\u003C/div\u003E\n\n\t\t\u003Ch1\u003E{stage_label}\u003C/h1\u003E\n\t\t\u003Cdiv id=\u0027progresscontainer\u0027\u003E\n\t\t\t\u003Cdiv id=\u0027progress_time\u0027\u003E{((internal_state === \u0027playing\u0027 || internal_state === \u0027paused\u0027) \u0026\u0026 current_stage) ? current_stage.duration - offset_sec : \u0027\u0027}\u003C/div\u003E\n\t\t\t\u003Cdiv id=\u0027progress\u0027 style=\u0027width: {bar_width}%\u0027\u003E\u003C/div\u003E\n\t\t\u003C/div\u003E\n\n\t\t\u003Cdiv id=\u0027gameprogress\u0027\u003E\n\t\t\t{#each game_stages as s, i}\n\t\t\t\t{#if s.type === \u0027bead\u0027 || s.type === \u0027breath\u0027}\n\t\t\t\t\t\u003Cspan class={\u0027prog-\u0027 \u002B s.type \u002B \u0027 \u0027 \u002B progress_class(i, current_stage_idx)} style=\u0027width: {100 * s.duration / inner_game_length}%\u0027\u003E\u003C/span\u003E\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t\u003C/div\u003E\n\n\t\t{#if (_magister == null || _magister == true)}\n\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t\t{/if}\n\t\t{/if}\n\n\t\t\u003Cdiv style=\u0027height: 400px;\u0027\u003E\u003C/div\u003E\n\n\t\t\u003Cdetails\u003E\n\t\t\t\u003C!-- I\u0027m not ready to delete these UI elements but we might not use them --\u003E\n\t\t\t\u003Csummary\u003EInfo\u003C/summary\u003E\n\n\t\t\t\u003Ch1\u003E{game_config.topic}\u003C/h1\u003E\n\t\t\t\u003Ch4\u003ERoom: \u003Cem\u003E{room}\u003C/em\u003E \u003Ca href=\u0022../..\u0022\u003E(leave)\u003C/a\u003E\u003C/h4\u003E\n\n\t\t\t\u003Cdiv\u003E\n\t\t\t\t{state === \u0027waiting\u0027 ? \u0027Waiting for the game to start\u0027\n\t\t\t\t: state === \u0027paused\u0027 ? \u0027GAME PAUSED\u0027\n\t\t\t\t: state === \u0027playing\u0027 ? \u0027Game in progress\u0027\n\t\t\t\t: \u0027\u0027}\n\t\t\t\u003C/div\u003E\n\t\t\t{#if connection !== \u0027connected\u0027}\n\t\t\t\t\u003Cdiv\u003EDISCONNECTED FROM GAME SERVER\u003C/div\u003E\n\t\t\t{:else}\n\t\t\t\t{#if _active_sessions == 1}\n\t\t\t\t\t\u003Cdiv\u003EYou are alone in the room\u003C/div\u003E\n\t\t\t\t{:else}\n\t\t\t\t\t\u003Cdiv\u003E{_active_sessions} players are in this room\u003C/div\u003E\n\t\t\t\t{/if}\n\t\t\t{/if}\n\n\t\t\t\u003Cdiv id=\u0027rounds\u0027\u003E\n\t\t\t\t\u003Ch2\u003EGame\u003C/h2\u003E\n\t\t\t\t{#if game_config.meditate}\n\t\t\t\t\t\u003Cdiv\u003E\n\t\t\t\t\t\t\u003C!-- \u003Cspan class={progress_class(current_stage, \u0027meditate\u0027)}\u003EMeditation (1 min)\u003C/span\u003E --\u003E\n\t\t\t\t\t\t\u003Cspan\u003EMeditation (1 min)\u003C/span\u003E\n\t\t\t\t\t\u003C/div\u003E\n\t\t\t\t{/if}\n\t\t\t\t{#each Array(Math.max(game_config.rounds, 0)) as _, r}\n\t\t\t\t\t\u003Cdiv\u003ERound {r\u002B1}:\n\t\t\t\t\t\t{#each Array(Math.max(game_config.players, 0)) as _, p}\n\t\t\t\t\t\t\t\u003C!-- \u003Cspan class={\u0027bead \u0027 \u002B progress_class(current_stage, \u0027bead\u0027, r, p)}\u003E{p\u002B1} \u003C/span\u003E --\u003E\n\t\t\t\t\t\t\t\u003Cspan\u003E{p\u002B1} \u003C/span\u003E\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t\u003C/div\u003E\n\t\t\t\t{/each}\n\t\t\t\u003C/div\u003E\n\n\t\t\u003C/details\u003E\n\n\t\t{#if _magister == null || _magister == true}\n\t\t\t\u003Cdetails class=\u0027config\u0027 bind:open={config_open}\u003E\n\t\t\t\t\u003Csummary\u003EGame controls\u003C/summary\u003E\n\n\t\t\t\t\u003Cp\u003E\n\t\t\t\t\t{#if _magister == null}\n\t\t\t\t\t\tThis will effect all players. Will you borrow power? Will you steal it?\n\t\t\t\t\t{:else}\n\t\t\t\t\t\tYou are master of the games. These controls are yours alone.\n\t\t\t\t\t{/if}\n\t\t\t\t\u003C/p\u003E\n\n\t\t\t\t{#if internal_state == \u0027waiting\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EStart\u003C/button\u003E\n\t\t\t\t{:else if internal_state == \u0027playing\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027paused\u0027)}\u003EPause\u003C/button\u003E\n\t\t\t\t{:else if internal_state == \u0027paused\u0027}\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027playing\u0027)}\u003EResume\u003C/button\u003E\n\t\t\t\t{/if}\n\n\t\t\t\t{#if internal_state == \u0027paused\u0027 || internal_state == \u0027completed\u0027 }\n\t\t\t\t\t\u003Cbutton on:click={upd(\u0027state\u0027, \u0027waiting\u0027)}\u003ERestart game\u003C/button\u003E\n\t\t\t\t{/if}\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ETopic\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027text\u0027 value={game_config.topic} on:input={config(\u0027topic\u0027)} list=\u0027archetopics\u0027 \u003E\n\t\t\t\t\t\u003Cdatalist id=\u0027archetopics\u0027\u003E\n\t\t\t\t\t\t{#each ARCHETOPICS as topic}\n\t\t\t\t\t\t\t\u003Coption value={topic}\u003E\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t\u003C/datalist\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003EPre-game meditation\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027checkbox\u0027 checked={game_config.meditate} on:input={config(\u0027meditate\u0027)} \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003EPost game contemplation\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027checkbox\u0027 checked={game_config.contemplation} on:input={config(\u0027contemplation\u0027)} \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ENumber of players\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.players} on:input={config(\u0027players\u0027)} min=1 max=12 \u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ENumber of rounds\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.rounds} on:input={config(\u0027rounds\u0027)} min=1 max=20\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ESeconds per bead\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.seconds_per_bead} on:input={config(\u0027seconds_per_bead\u0027)}\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Clabel\u003E\n\t\t\t\t\t\u003Cspan\u003ESeconds between beads\u003C/span\u003E\n\t\t\t\t\t\u003Cinput disabled={settings_disabled} type=\u0027number\u0027 pattern=\u0027[0-9]*\u0027 value={game_config.seconds_between_bead} on:input={config(\u0027seconds_between_bead\u0027)}\u003E\n\t\t\t\t\u003C/label\u003E\n\n\t\t\t\t\u003Cdiv style=\u0027margin-top: 1em;\u0027\u003E\n\t\t\t\t\t(Total game length: {roundish(\n\t\t\t\t\t\tgame_stages.reduce((x, s) =\u003E x \u002B s.duration, 0) / 60\n\t\t\t\t\t)} minutes)\n\t\t\t\t\u003C/div\u003E\n\n\t\t\t\t\u003Cdiv id=\u0027magister_box\u0027 class:magister_opaque\u003E\n\t\t\t\t\t{#if _magister == null}\n\t\t\t\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, true)}\u003EAssume the mantle of Magister Ludi\u003C/button\u003E\n\t\t\t\t\t\t\u003Cp\u003E\u003Ci\u003EAdvanced - for large games\u003C/i\u003E\u003C/p\u003E\n\t\t\t\t\t\t\u003Cp\u003EWhen present, the Magister Ludi (master of the games) has exclusive control of the game.\u003C/p\u003E\n\t\t\t\t\t{:else if _magister == true}\n\t\t\t\t\t\t\u003Cbutton on:click={upd(\u0027_magister\u0027, null)}\u003EAbdicate Magister Ludi status\u003C/button\u003E\n\t\t\t\t\t\t\u003Cp\u003EYou are the master of the games. You have exclusive control over playing, pausing and configuring this game.\u003C/p\u003E\n\t\t\t\t\t\t\u003Cp\u003EDo not close this browser window or you will be dethroned.\u003C/p\u003E\n\t\t\t\t\t{/if}\n\t\t\t\t\u003C/div\u003E\n\t\t\t\u003C/details\u003E\n\t\t{:else}\n\t\t\t\u003Cp class=\u0027config\u0027\u003EMagister Ludi is managing this game.\u003C/p\u003E\n\t\t{/if}\n\t{/if}\n\u003C/main\u003E\n\n\u003Cstyle\u003E\n\nmain {\n\t/* margin-bottom: 3em; */\n\ttext-align: center;\n}\n\n#topicimg {\n\twidth: 300px;\n\tdisplay: inline-block;\n}\n\n/* .magister {\n\tbackground-color: var(--bg-highlight);\n} */\n\nh1 {\n\tmargin-top: 1em;\n}\n\n#progresscontainer {\n\t/* width: calc(100% - 50px); */\n\tposition: relative;\n\tmargin: 10px 25px;\n\theight: 5em;\n\tborder: 2px solid var(--fg-color);\n\t/* margin-bottom: 0; */\n}\n\n#progress_time {\n\tposition: absolute;\n\t/* color: red; */\n\t/* font-size: var(--bg-color); */\n\tcolor: white;\n\t/* color: white; */\n\tfont-size: 54px;\n\tmargin-left: 5px;\n\tmix-blend-mode: difference;\n}\n\n#progress {\n\tbackground-color: var(--fg-color);\n\t/* width: 50%; */\n\theight: 100%;\n\t/* transition: width 1s linear; */\n}\n\n#gameprogress {\n\t/* width: 300px; */\n\tmargin: 25px;\n\theight: 15px;\n\t/* background-color: blue; */\n\tmargin-top: 0;\n}\n\n#gameprogress \u003E span {\n\tdisplay: inline-block;\n\t/* height: 10px; */\n\tbackground-color: var(--fg-color);\n\t/* border-left: 1px solid var(--bg-color);\n\tborder-right: 1px solid var(--bg-color); */\n}\n\n/* .prog-waiting {\n\theight: 100%;\n} */\n/* .prog-meditate, .prog-contemplation {\n\theight: 50%;\n} */\n.prog-bead {\n\theight: 100%;\n}\n/* .prog-breath {\n} */\n\n.s-done {\n\topacity: 20%;\n}\n/* .s-active {\n\n} */\n.s-waiting {\n\topacity: 50%;\n\t\t\t\tlabel: \u0027\u0027,\n\t\t\t\t// label: game_config.players \u003E 1 ? \u0060Round ${r\u002B1} player ${p\u002B1}\u0060 : \u0060Round ${r\u002B1}\u0060,\n x\n\tmin-width: height1.25em; --\u003E\u003C!--  id=\u0027stagelabel\u0027\n\n#stagelabel {\n\t}\n\tmin-height: 1em;2\tmargin-top: 1em;\n\t\t\tmargin-top: 1em;.11.5 \u003E svg \u003E :global(svg)  \u003EIconsiconsimport * as topicIcons from \u0027./topicicons.json\u0027\nSpecialspecial\n\t\t\n\t\t\t\telse {\n\t\t\t\n\t\t\t\t\t}\t\t\tconst textContent = topicSptopicSpecial[\n\t\tconst topic = game_config.topic.toLocaleLowerCase()topictopic ] as keyof typeof topicIconstopicSptopicSpecial\n\t\t\tif (textContextContent) topic_imtopic_img.innerinnerText = textContetextContenteleeleeleeleele\n\t\t\t\n\t\t\n\t\t\t\u003Cdiv id=\u0022topic\u0027\u0027topicimg bind:this={topic_elem}img\u003E\u003C/div\u003E\n\t\t\t\u003Cdiv id=\u0027topicimg\u0027 bind:this={topic_img}\u003E\u003C/div\u003Elet topic_elem: HTMLElement\nimgtextmimg \u0026 \u0026 topic_textimgtext\t\t\t\u003Cdiv id=\u0027topicimg\u0027 bind:this={topic_img}\u003E\u003C/div\u003E\ntexttextimg#topicimg {\n\twidth: 300px;\n\tdisplay: inline-block;\n}\ntextpadding: 2em;\n\tfont-style: ititalic;\n\t\telse {\t\t\n\t\tif (svgContent) topic_img.innerHTML = svgContent\n\t\tconst svgContent = topicIcons[topic as keyof typeof topicIcons]\t\tconst svgContent = topicIcons[topic as keyof typeof topicIcons]\n\n\t\ti\n\t\telse \t\t\t{game_config.topic}topic_text = .innerinnerText{\n\t\t\t\n\t\t\ttopic_text.innerText = \u0027\u0027\n\t\t\t\t\t}\t\t} else if (textContent) topic_text.innerText = textContent{\n\t\t\t\t\t\ttopic_img.innerHTML = svgContent\n\t\t\ttopic_text.innerText = \u0027\u0027\n\t\t} else if (textContent) {\n\u0027\u0027\n\t\t\t\t\t}\t\t} else topic_text.innerText = game_config.topic{\n\t\t\t\n\t\t\t\t\t}\t\t\ttopic_img.innerHTML = \u0027\u0027\n\t\t\ttopic_text.innerText = textContent\n\t\t} else {\n5\n\tfonttext-size: font-sizefont-size: ;140%34./topicspecial\nconst randItem = (\u003CT\u003E(arr: T[]):  =\u003E t[t.\nconst randInt = (n: number) :  =\u003E MathMath.randomrandom() * nMath.floorfloor()randInt(arr.length)]\n\t;\u003CT\u003EamTfunction\u003CT\u003E{return }arrrandItem()\n\t\t\n\t\t\u003Cdiv\u003E id=fixaudio\u0027\u0027\u003C/div\u003EAudio muted. Click to ununmute\n\nfixaudio# {\n\t\n\t}\tborder: 1px soldiid whitewhitee;\n\tbg-cobackgroun-d0-color: var(--bg---bg-highlight);\n\tposition: fixed;\n\ttop: 1px;\n\twidth: 300px;\n\tmargin: 1em 2em;3padding1\n\tleft: 50%;\n\ttransform: trantranslateX()-50%; *//* \n\n\n\n\n\u002Blet audio_works = true\n\u002B\n\u002Bfunction test_audio() {\n\u002B\tlet a = new Audio()\n\u002B\ta.volume = 0.1\n\u002B\ta.src = \u0027/silence.mp3\u0027\n\u002B\ta.play().then(\n\u002B\t\t() =\u003E {\n\u002B\t\t\taudio_works = true\n\u002B\t\t\tconsole.log(\u0027Audio works\u0027)\n\u002B\t\t},\n\u002B\t\t() =\u003E {\n\u002B\t\t\taudio_works = false\n\u002B\t\t\tconsole.log(\u0027Audio does not work\u0027)\n\u002B\t\t}\n\u002B\t)\n\u002B}\n\u002Bfunction fix_audio(e) {\n\u002B\n\u002B// \tconsole.log(\u0027xx\u0027)\n\u002B\ttest_audio()\n\u002B}\n\u002BsetTimeout(test_audio, 0)\n\u002B\n// // // // \n\t\t{#if !audio_works}\t\n\t{/if}\tuuttbbuuttttoonn\n\tcolor: var(--fg--fg-color); *//*  *//*  onclickon:click={}fixaufix_audiofixxx\n\tz-index: 1;20.51\nconst n = randIntconst randfixed_rand = Math.randomrandom()fixed_rand2//  0 autpploplay\n\nconst rount --\u003E\u003C!-- \n\n\t\u003Caudio bind:this={round_audio} src=\u0022/lo-metal-tone.mp3\u0022 preload=\u0022auto\u0022 autoplay\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n\t\u003Caudio bind:this={complete_audio} src=\u0022/hi-metal-tone.mp3\u0022 preload=\u0022auto\u0022\u003E\u003Ctrack kind=\u0022captions\u0022\u003E\u003C/audio\u003E\n = new Audio()\nround_audioround_audio.src  \n\nround_audioround_audio.prelpreload = \u0027auto\u0027// // round_audio = new Audio()\nround_audio.src = \u0022/lo-metal-tone.mp3\u0022\nccoommpplleettee__aauuddiioo\u0022/hi-metal-tone.mp3\u0022// // // \n\ta.play().then(// round_audio\n\t\tround_audioround_audio.volume = 0.01\tmuted = true\tround_audio.muted = true\n\t\t\tround_audio.play().then(\n\t\t\t\t\t() =\u003E {\nfalse\t\t\tround_audio.muted = false\n\t\t\taudio_works = true\n\t\t\tconsole.log(\u0027Audio works\u0027)\n\t\t\t\t},\n\t\t\t\t\t() =\u003E {\n\n\t\t() =\u003E {\t\t\n\t\t},\t\t\t\n\t\t\tconsole.log(\u0027Audio works\u0027)\n\t\t\taudio_works = truetrue\n\t\t() =\u003E {\t\t\n\tround_audio.play().then(\tvolume = 0.01\t\tround_audioround_audiorounround_audio]\n\tconst old_src = round_audioround_audio.asrc\n\t\t\trond_audioround_audio.src = old_old_src\n\t\t\tround_audio.src = old_srcround\tconst round_src = round_audio.src\ncroundccoommpplleettee\tround_audio.src = \u0027/silence.mp3\u0027\n completcomplete_audio.src =\n\t\tcomplete_audiocomplete_audio.play()\trroouunndd__ssrrcc\n\t\t\t\n\t\t\tccoommpplleettee__aauuddiioocomplete_audiocomplete_audio..ssrrcc  ==  ccoommpplleettee__sscomplete_srccomplete_src\n\t// This ugly monstrosity brought to you by iOS Safari. This iseems to tbe the only way to bless the audio objects to be able to play during the game. :/\n\t\u003C/style\u003E\n\t// tT\n\t//  *//* min-\n\tfont-size: 60%;102523 *//* absoluabsolute.53 2em 0:not(:empty):empty *//*  *//* \n\tn2bottomwillstarting...\n\nwindow.onclick = () =\u003E {\n\t\n\t}\tconsoe.le.log(\u0027onclick\u0022\u0027)documenttest_audio()if (!audio)_works) \n\t// \ndocument.onclick = () =\u003E {\n\tif (!audio_works) test_audio()\n}"],"Pieces":[{"Start":18937,"Length":1,"LineBreaks":[]},{"Start":34932,"Length":1,"LineBreaks":[34932]},{"Start":38891,"Length":1,"LineBreaks":[]},{"Start":38893,"Length":1,"LineBreaks":[]},{"Start":38939,"Length":1,"LineBreaks":[]},{"Start":38940,"Length":1,"LineBreaks":[]},{"Start":38944,"Length":1,"LineBreaks":[]},{"Start":38945,"Length":1,"LineBreaks":[]},{"Start":38946,"Length":1,"LineBreaks":[]},{"Start":38947,"Length":1,"LineBreaks":[]},{"Start":38948,"Length":1,"LineBreaks":[]},{"Start":38949,"Length":1,"LineBreaks":[]},{"Start":38950,"Length":1,"LineBreaks":[]},{"Start":38951,"Length":1,"LineBreaks":[]},{"Start":38953,"Length":1,"LineBreaks":[]},{"Start":38954,"Length":1,"LineBreaks":[]},{"Start":38955,"Length":1,"LineBreaks":[]},{"Start":38956,"Length":1,"LineBreaks":[]},{"Start":38957,"Length":1,"LineBreaks":[]},{"Start":38982,"Length":15,"LineBreaks":[]},{"Start":39002,"Length":1,"LineBreaks":[]},{"Start":39003,"Length":11,"LineBreaks":[39013]},{"Start":39015,"Length":1,"LineBreaks":[]},{"Start":39017,"Length":1,"LineBreaks":[]},{"Start":39018,"Length":1,"LineBreaks":[]},{"Start":39019,"Length":1,"LineBreaks":[]},{"Start":39020,"Length":1,"LineBreaks":[]},{"Start":39021,"Length":1,"LineBreaks":[]},{"Start":39022,"Length":1,"LineBreaks":[]},{"Start":39023,"Length":1,"LineBreaks":[]},{"Start":39024,"Length":1,"LineBreaks":[]},{"Start":39025,"Length":1,"LineBreaks":[]},{"Start":39026,"Length":1,"LineBreaks":[]},{"Start":39027,"Length":1,"LineBreaks":[]},{"Start":39028,"Length":1,"LineBreaks":[]},{"Start":39029,"Length":1,"LineBreaks":[]},{"Start":39030,"Length":1,"LineBreaks":[]},{"Start":39031,"Length":1,"LineBreaks":[]},{"Start":39032,"Length":1,"LineBreaks":[]},{"Start":39033,"Length":1,"LineBreaks":[]},{"Start":39034,"Length":1,"LineBreaks":[]},{"Start":39036,"Length":2,"LineBreaks":[]},{"Start":39038,"Length":1,"LineBreaks":[]},{"Start":39039,"Length":1,"LineBreaks":[]},{"Start":39040,"Length":1,"LineBreaks":[]},{"Start":39041,"Length":1,"LineBreaks":[]},{"Start":39042,"Length":1,"LineBreaks":[]},{"Start":39043,"Length":1,"LineBreaks":[]},{"Start":39044,"Length":1,"LineBreaks":[]},{"Start":39045,"Length":1,"LineBreaks":[]},{"Start":39046,"Length":1,"LineBreaks":[]},{"Start":39047,"Length":1,"LineBreaks":[]},{"Start":39048,"Length":1,"LineBreaks":[]},{"Start":39050,"Length":1,"LineBreaks":[]},{"Start":39051,"Length":1,"LineBreaks":[]},{"Start":39052,"Length":1,"LineBreaks":[]},{"Start":39053,"Length":1,"LineBreaks":[]},{"Start":39054,"Length":1,"LineBreaks":[]},{"Start":39055,"Length":1,"LineBreaks":[]},{"Start":39292,"Length":1,"LineBreaks":[]},{"Start":39293,"Length":1,"LineBreaks":[]},{"Start":39294,"Length":1,"LineBreaks":[]},{"Start":39295,"Length":1,"LineBreaks":[]},{"Start":39296,"Length":1,"LineBreaks":[]},{"Start":39297,"Length":1,"LineBreaks":[]},{"Start":39299,"Length":1,"LineBreaks":[]},{"Start":39300,"Length":1,"LineBreaks":[]},{"Start":39301,"Length":1,"LineBreaks":[]},{"Start":39302,"Length":1,"LineBreaks":[]},{"Start":39303,"Length":1,"LineBreaks":[]},{"Start":39304,"Length":1,"LineBreaks":[]},{"Start":39306,"Length":1,"LineBreaks":[]},{"Start":39307,"Length":1,"LineBreaks":[]},{"Start":39308,"Length":1,"LineBreaks":[]},{"Start":39309,"Length":1,"LineBreaks":[]},{"Start":39310,"Length":1,"LineBreaks":[]},{"Start":39311,"Length":2,"LineBreaks":[]},{"Start":39313,"Length":1,"LineBreaks":[]},{"Start":39314,"Length":1,"LineBreaks":[]},{"Start":39315,"Length":1,"LineBreaks":[]},{"Start":39316,"Length":1,"LineBreaks":[]},{"Start":39317,"Length":1,"LineBreaks":[]},{"Start":39318,"Length":1,"LineBreaks":[]},{"Start":39319,"Length":1,"LineBreaks":[]},{"Start":39320,"Length":1,"LineBreaks":[]},{"Start":39321,"Length":1,"LineBreaks":[]},{"Start":39322,"Length":1,"LineBreaks":[]},{"Start":39323,"Length":1,"LineBreaks":[]},{"Start":39324,"Length":1,"LineBreaks":[]},{"Start":39325,"Length":1,"LineBreaks":[]},{"Start":39326,"Length":1,"LineBreaks":[]},{"Start":39327,"Length":1,"LineBreaks":[]},{"Start":39328,"Length":1,"LineBreaks":[]},{"Start":39329,"Length":1,"LineBreaks":[]},{"Start":39330,"Length":1,"LineBreaks":[]},{"Start":39417,"Length":1,"LineBreaks":[]},{"Start":39431,"Length":2,"LineBreaks":[]},{"Start":39433,"Length":1,"LineBreaks":[]},{"Start":39434,"Length":1,"LineBreaks":[]},{"Start":39435,"Length":1,"LineBreaks":[]},{"Start":39436,"Length":1,"LineBreaks":[]},{"Start":39437,"Length":1,"LineBreaks":[]},{"Start":39438,"Length":1,"LineBreaks":[]},{"Start":39439,"Length":1,"LineBreaks":[]},{"Start":39443,"Length":1,"LineBreaks":[]},{"Start":39444,"Length":1,"LineBreaks":[]},{"Start":39587,"Length":2,"LineBreaks":[39587]},{"Start":39589,"Length":14,"LineBreaks":[]},{"Start":39604,"Length":1,"LineBreaks":[]},{"Start":39633,"Length":2,"LineBreaks":[39633]},{"Start":39635,"Length":9,"LineBreaks":[]},{"Start":39646,"Length":1,"LineBreaks":[]},{"Start":39647,"Length":1,"LineBreaks":[]},{"Start":39648,"Length":1,"LineBreaks":[]},{"Start":39650,"Length":1,"LineBreaks":[]},{"Start":39651,"Length":1,"LineBreaks":[]},{"Start":41294,"Length":1,"LineBreaks":[41294]},{"Start":41295,"Length":16,"LineBreaks":[]},{"Start":41320,"Length":1,"LineBreaks":[]},{"Start":41321,"Length":11,"LineBreaks":[]},{"Start":41335,"Length":7,"LineBreaks":[]},{"Start":41342,"Length":1,"LineBreaks":[]},{"Start":41344,"Length":1,"LineBreaks":[]},{"Start":41350,"Length":1,"LineBreaks":[]},{"Start":41395,"Length":1,"LineBreaks":[]},{"Start":41396,"Length":1,"LineBreaks":[]},{"Start":41399,"Length":1,"LineBreaks":[]},{"Start":41400,"Length":5,"LineBreaks":[]},{"Start":41412,"Length":1,"LineBreaks":[]},{"Start":41415,"Length":1,"LineBreaks":[]},{"Start":41416,"Length":1,"LineBreaks":[]},{"Start":41417,"Length":1,"LineBreaks":[]},{"Start":41418,"Length":1,"LineBreaks":[41418]},{"Start":41419,"Length":13,"LineBreaks":[]},{"Start":41432,"Length":1,"LineBreaks":[]},{"Start":41433,"Length":1,"LineBreaks":[]},{"Start":41434,"Length":1,"LineBreaks":[]},{"Start":41435,"Length":1,"LineBreaks":[]},{"Start":41436,"Length":1,"LineBreaks":[]},{"Start":41437,"Length":1,"LineBreaks":[]},{"Start":41438,"Length":1,"LineBreaks":[]},{"Start":41439,"Length":1,"LineBreaks":[]},{"Start":41440,"Length":1,"LineBreaks":[]},{"Start":41441,"Length":1,"LineBreaks":[]},{"Start":41443,"Length":1,"LineBreaks":[]},{"Start":41445,"Length":1,"LineBreaks":[]},{"Start":41446,"Length":9,"LineBreaks":[]},{"Start":41456,"Length":3,"LineBreaks":[]},{"Start":41459,"Length":1,"LineBreaks":[]},{"Start":41460,"Length":1,"LineBreaks":[]},{"Start":41461,"Length":1,"LineBreaks":[]},{"Start":41469,"Length":1,"LineBreaks":[]},{"Start":41470,"Length":1,"LineBreaks":[]},{"Start":41471,"Length":1,"LineBreaks":[]},{"Start":41472,"Length":1,"LineBreaks":[]},{"Start":41473,"Length":1,"LineBreaks":[]},{"Start":41474,"Length":1,"LineBreaks":[]},{"Start":41475,"Length":1,"LineBreaks":[]},{"Start":41476,"Length":1,"LineBreaks":[]},{"Start":41477,"Length":1,"LineBreaks":[]},{"Start":42181,"Length":9,"LineBreaks":[]},{"Start":42195,"Length":1,"LineBreaks":[]},{"Start":42196,"Length":9,"LineBreaks":[]},{"Start":42296,"Length":1,"LineBreaks":[]},{"Start":42297,"Length":1,"LineBreaks":[]},{"Start":42298,"Length":19,"LineBreaks":[]},{"Start":42317,"Length":1,"LineBreaks":[42317]},{"Start":43671,"Length":3,"LineBreaks":[]},{"Start":43796,"Length":1,"LineBreaks":[]},{"Start":59034,"Length":112,"LineBreaks":[]},{"Start":59146,"Length":7,"LineBreaks":[]},{"Start":59158,"Length":5,"LineBreaks":[]},{"Start":59168,"Length":7,"LineBreaks":[]},{"Start":59188,"Length":596,"LineBreaks":[]},{"Start":59784,"Length":10,"LineBreaks":[]},{"Start":59797,"Length":13,"LineBreaks":[]},{"Start":59810,"Length":405,"LineBreaks":[]},{"Start":60215,"Length":1,"LineBreaks":[]},{"Start":60216,"Length":17,"LineBreaks":[]},{"Start":60236,"Length":3,"LineBreaks":[]},{"Start":60239,"Length":1,"LineBreaks":[]},{"Start":60388,"Length":5,"LineBreaks":[]},{"Start":60394,"Length":102,"LineBreaks":[]},{"Start":73063,"Length":2,"LineBreaks":[]},{"Start":73289,"Length":299,"LineBreaks":[]},{"Start":73588,"Length":334,"LineBreaks":[73588,73590,73613,73637,73655,73657,73658,73666,73679,73697,73728,73756,73758,73759,73782,73796,73798,73799,73807,73824,73826,73827,73843,73880,73902,73921]},{"Start":74634,"Length":275,"LineBreaks":[]},{"Start":74926,"Length":500,"LineBreaks":[74928,74947,74962,74979,74983,75029,75050,75070,75102,75106,75154,75204,75284,75306,75354,75374,75396,75402,75403,75425]},{"Start":75510,"Length":1648,"LineBreaks":[]},{"Start":77167,"Length":3624,"LineBreaks":[]},{"Start":80800,"Length":352,"LineBreaks":[]},{"Start":81737,"Length":449,"LineBreaks":[]},{"Start":82187,"Length":187,"LineBreaks":[]},{"Start":82374,"Length":70,"LineBreaks":[]},{"Start":82444,"Length":139,"LineBreaks":[]},{"Start":82583,"Length":1,"LineBreaks":[]},{"Start":82584,"Length":163,"LineBreaks":[]},{"Start":82750,"Length":1,"LineBreaks":[]},{"Start":82773,"Length":1,"LineBreaks":[]},{"Start":82793,"Length":13,"LineBreaks":[]},{"Start":82806,"Length":1618,"LineBreaks":[]},{"Start":84981,"Length":3362,"LineBreaks":[]},{"Start":88343,"Length":1,"LineBreaks":[]},{"Start":88344,"Length":6,"LineBreaks":[]},{"Start":88354,"Length":3,"LineBreaks":[88355]},{"Start":88394,"Length":65,"LineBreaks":[88394,88396,88397,88412,88452,88457,88458]},{"Start":88459,"Length":5,"LineBreaks":[88463]},{"Start":88481,"Length":2,"LineBreaks":[88481]},{"Start":88483,"Length":1035,"LineBreaks":[88483,88484,88505,88538,88559,88579,88593,88629,88654,88656,88657,88674,88695,88714,88749,88764,88785,88803,88822,88851,88853,88854,88866,88902,88921,88936,88972,88974,88975,88991,89012,89027,89042,89073,89089,89091,89092,89115,89139,89160,89196,89240,89285,89287,89288,89307,89322,89327,89368,89382,89387,89400,89415,89417,89435,89440,89441,89451,89466,89468,89483,89484,89489,89502,89517]},{"Start":89518,"Length":12,"LineBreaks":[]},{"Start":89530,"Length":90,"LineBreaks":[89532,89619]},{"Start":89657,"Length":16,"LineBreaks":[]},{"Start":89673,"Length":13,"LineBreaks":[]},{"Start":89686,"Length":2,"LineBreaks":[]},{"Start":89688,"Length":1,"LineBreaks":[]},{"Start":89690,"Length":1,"LineBreaks":[]},{"Start":89691,"Length":1,"LineBreaks":[]},{"Start":89697,"Length":8,"LineBreaks":[]},{"Start":89706,"Length":3,"LineBreaks":[]},{"Start":89729,"Length":1,"LineBreaks":[]},{"Start":89730,"Length":1,"LineBreaks":[]},{"Start":89731,"Length":16,"LineBreaks":[]},{"Start":89749,"Length":1,"LineBreaks":[]},{"Start":89750,"Length":1,"LineBreaks":[]},{"Start":89773,"Length":1,"LineBreaks":[]},{"Start":89786,"Length":48,"LineBreaks":[89833]},{"Start":89834,"Length":7,"LineBreaks":[]},{"Start":89876,"Length":1,"LineBreaks":[]},{"Start":89877,"Length":1,"LineBreaks":[]},{"Start":89878,"Length":1,"LineBreaks":[]},{"Start":89879,"Length":1,"LineBreaks":[]},{"Start":89880,"Length":1,"LineBreaks":[]},{"Start":89881,"Length":1,"LineBreaks":[]},{"Start":89882,"Length":1,"LineBreaks":[]},{"Start":89883,"Length":1,"LineBreaks":[]},{"Start":89884,"Length":1,"LineBreaks":[]},{"Start":89885,"Length":1,"LineBreaks":[]},{"Start":89886,"Length":1,"LineBreaks":[]},{"Start":89887,"Length":1,"LineBreaks":[]},{"Start":89888,"Length":1,"LineBreaks":[]},{"Start":89889,"Length":1,"LineBreaks":[]},{"Start":89890,"Length":1,"LineBreaks":[]},{"Start":89891,"Length":1,"LineBreaks":[]},{"Start":89892,"Length":1,"LineBreaks":[]},{"Start":89893,"Length":1,"LineBreaks":[]},{"Start":89894,"Length":1,"LineBreaks":[]},{"Start":89895,"Length":1,"LineBreaks":[]},{"Start":89903,"Length":12,"LineBreaks":[]},{"Start":89915,"Length":1,"LineBreaks":[]},{"Start":89916,"Length":54,"LineBreaks":[89916]},{"Start":89975,"Length":1,"LineBreaks":[]},{"Start":89976,"Length":1,"LineBreaks":[]},{"Start":89977,"Length":1,"LineBreaks":[]},{"Start":89978,"Length":1,"LineBreaks":[]},{"Start":89979,"Length":1,"LineBreaks":[]},{"Start":89981,"Length":1,"LineBreaks":[]},{"Start":89982,"Length":17,"LineBreaks":[]},{"Start":90016,"Length":12,"LineBreaks":[]},{"Start":90130,"Length":3,"LineBreaks":[90130]},{"Start":90194,"Length":1,"LineBreaks":[90194]},{"Start":90195,"Length":17,"LineBreaks":[]},{"Start":90215,"Length":19,"LineBreaks":[]},{"Start":90237,"Length":8,"LineBreaks":[]},{"Start":90245,"Length":10,"LineBreaks":[]},{"Start":90259,"Length":14,"LineBreaks":[90272]},{"Start":90273,"Length":1,"LineBreaks":[]},{"Start":90274,"Length":1,"LineBreaks":[]},{"Start":90275,"Length":1,"LineBreaks":[]},{"Start":90276,"Length":1,"LineBreaks":[]},{"Start":90277,"Length":1,"LineBreaks":[]},{"Start":90278,"Length":1,"LineBreaks":[]},{"Start":90279,"Length":1,"LineBreaks":[]},{"Start":90281,"Length":1,"LineBreaks":[]},{"Start":90282,"Length":4,"LineBreaks":[]},{"Start":90287,"Length":1,"LineBreaks":[]},{"Start":90288,"Length":11,"LineBreaks":[]},{"Start":90306,"Length":51,"LineBreaks":[90356]},{"Start":90357,"Length":4,"LineBreaks":[]},{"Start":90361,"Length":4,"LineBreaks":[]},{"Start":90368,"Length":53,"LineBreaks":[90379,90394,90418,90420]},{"Start":90421,"Length":1,"LineBreaks":[]},{"Start":90422,"Length":1,"LineBreaks":[]},{"Start":90423,"Length":1,"LineBreaks":[]},{"Start":90424,"Length":1,"LineBreaks":[]},{"Start":90425,"Length":9,"LineBreaks":[]},{"Start":90435,"Length":2,"LineBreaks":[]},{"Start":90437,"Length":1,"LineBreaks":[]},{"Start":90438,"Length":14,"LineBreaks":[]},{"Start":90454,"Length":6,"LineBreaks":[]},{"Start":90460,"Length":1,"LineBreaks":[]},{"Start":90470,"Length":2,"LineBreaks":[]},{"Start":90472,"Length":19,"LineBreaks":[90472]},{"Start":90491,"Length":22,"LineBreaks":[]},{"Start":90589,"Length":66,"LineBreaks":[90654]},{"Start":90655,"Length":1,"LineBreaks":[]},{"Start":90717,"Length":2,"LineBreaks":[90718]},{"Start":90719,"Length":3,"LineBreaks":[]},{"Start":90823,"Length":93,"LineBreaks":[90858,90887,90915]},{"Start":90916,"Length":1,"LineBreaks":[]},{"Start":90917,"Length":1,"LineBreaks":[]},{"Start":90934,"Length":40,"LineBreaks":[]},{"Start":90975,"Length":4,"LineBreaks":[90975]},{"Start":90979,"Length":1,"LineBreaks":[]},{"Start":90983,"Length":3,"LineBreaks":[]},{"Start":90986,"Length":28,"LineBreaks":[91013]},{"Start":91014,"Length":26,"LineBreaks":[]},{"Start":91040,"Length":11,"LineBreaks":[]},{"Start":91051,"Length":12,"LineBreaks":[91051,91062]},{"Start":91064,"Length":2,"LineBreaks":[]},{"Start":91090,"Length":11,"LineBreaks":[]},{"Start":91101,"Length":1,"LineBreaks":[]},{"Start":91102,"Length":1,"LineBreaks":[]},{"Start":91104,"Length":2,"LineBreaks":[]},{"Start":91106,"Length":1,"LineBreaks":[]},{"Start":91108,"Length":14,"LineBreaks":[]},{"Start":91122,"Length":1,"LineBreaks":[]},{"Start":91128,"Length":9,"LineBreaks":[]},{"Start":91144,"Length":1,"LineBreaks":[]},{"Start":91145,"Length":1,"LineBreaks":[]},{"Start":91146,"Length":1,"LineBreaks":[]},{"Start":91147,"Length":1,"LineBreaks":[]},{"Start":91148,"Length":1,"LineBreaks":[]},{"Start":91149,"Length":1,"LineBreaks":[]},{"Start":91151,"Length":1,"LineBreaks":[]},{"Start":91152,"Length":1,"LineBreaks":[]},{"Start":91153,"Length":1,"LineBreaks":[]},{"Start":91156,"Length":1,"LineBreaks":[]},{"Start":91159,"Length":1,"LineBreaks":[]},{"Start":91161,"Length":1,"LineBreaks":[]},{"Start":91164,"Length":1,"LineBreaks":[91164]},{"Start":91165,"Length":1,"LineBreaks":[]},{"Start":91166,"Length":1,"LineBreaks":[]},{"Start":91167,"Length":1,"LineBreaks":[]},{"Start":91168,"Length":1,"LineBreaks":[]},{"Start":91169,"Length":1,"LineBreaks":[]},{"Start":91170,"Length":1,"LineBreaks":[]},{"Start":91171,"Length":1,"LineBreaks":[]},{"Start":91172,"Length":1,"LineBreaks":[]},{"Start":91173,"Length":1,"LineBreaks":[]},{"Start":91174,"Length":1,"LineBreaks":[]},{"Start":91175,"Length":1,"LineBreaks":[]},{"Start":91176,"Length":1,"LineBreaks":[]},{"Start":91177,"Length":1,"LineBreaks":[]},{"Start":91178,"Length":1,"LineBreaks":[]},{"Start":91179,"Length":1,"LineBreaks":[]},{"Start":91180,"Length":1,"LineBreaks":[]},{"Start":91181,"Length":1,"LineBreaks":[]},{"Start":91182,"Length":1,"LineBreaks":[]},{"Start":91183,"Length":1,"LineBreaks":[]},{"Start":91184,"Length":1,"LineBreaks":[]},{"Start":91185,"Length":1,"LineBreaks":[]},{"Start":91186,"Length":1,"LineBreaks":[]},{"Start":91187,"Length":1,"LineBreaks":[]},{"Start":91188,"Length":1,"LineBreaks":[]},{"Start":91189,"Length":1,"LineBreaks":[]},{"Start":91190,"Length":1,"LineBreaks":[]},{"Start":91191,"Length":1,"LineBreaks":[]},{"Start":91195,"Length":1,"LineBreaks":[]},{"Start":91196,"Length":1,"LineBreaks":[]},{"Start":91197,"Length":1,"LineBreaks":[]},{"Start":91198,"Length":1,"LineBreaks":[]},{"Start":91222,"Length":1,"LineBreaks":[]},{"Start":91223,"Length":1,"LineBreaks":[]},{"Start":91224,"Length":1,"LineBreaks":[]},{"Start":91225,"Length":1,"LineBreaks":[]},{"Start":91226,"Length":1,"LineBreaks":[]},{"Start":91227,"Length":1,"LineBreaks":[]},{"Start":91228,"Length":1,"LineBreaks":[]},{"Start":91229,"Length":1,"LineBreaks":[]},{"Start":91230,"Length":1,"LineBreaks":[]},{"Start":91236,"Length":5,"LineBreaks":[]},{"Start":91241,"Length":1,"LineBreaks":[]},{"Start":91242,"Length":1,"LineBreaks":[]},{"Start":91243,"Length":1,"LineBreaks":[]},{"Start":91244,"Length":1,"LineBreaks":[]},{"Start":91245,"Length":1,"LineBreaks":[]},{"Start":91246,"Length":1,"LineBreaks":[]},{"Start":91247,"Length":1,"LineBreaks":[]},{"Start":91248,"Length":1,"LineBreaks":[]},{"Start":91249,"Length":1,"LineBreaks":[]},{"Start":91250,"Length":1,"LineBreaks":[]},{"Start":91251,"Length":1,"LineBreaks":[]},{"Start":91252,"Length":1,"LineBreaks":[]},{"Start":91253,"Length":1,"LineBreaks":[]},{"Start":91254,"Length":1,"LineBreaks":[]},{"Start":91255,"Length":1,"LineBreaks":[]},{"Start":91256,"Length":1,"LineBreaks":[]},{"Start":91257,"Length":1,"LineBreaks":[]},{"Start":91258,"Length":1,"LineBreaks":[]},{"Start":91259,"Length":1,"LineBreaks":[]},{"Start":91260,"Length":1,"LineBreaks":[]},{"Start":91261,"Length":1,"LineBreaks":[]},{"Start":91262,"Length":1,"LineBreaks":[]},{"Start":91263,"Length":1,"LineBreaks":[]},{"Start":91271,"Length":1,"LineBreaks":[]},{"Start":91272,"Length":1,"LineBreaks":[]},{"Start":91273,"Length":1,"LineBreaks":[]},{"Start":91274,"Length":1,"LineBreaks":[]},{"Start":91275,"Length":1,"LineBreaks":[]},{"Start":91276,"Length":1,"LineBreaks":[]},{"Start":91277,"Length":1,"LineBreaks":[]},{"Start":91278,"Length":1,"LineBreaks":[]},{"Start":91279,"Length":1,"LineBreaks":[]},{"Start":91280,"Length":1,"LineBreaks":[]},{"Start":91281,"Length":2,"LineBreaks":[]},{"Start":91283,"Length":1,"LineBreaks":[]},{"Start":91284,"Length":6,"LineBreaks":[]},{"Start":91290,"Length":2,"LineBreaks":[]},{"Start":91292,"Length":1,"LineBreaks":[]},{"Start":91293,"Length":2,"LineBreaks":[]},{"Start":91295,"Length":9,"LineBreaks":[]},{"Start":91304,"Length":1,"LineBreaks":[]},{"Start":91305,"Length":1,"LineBreaks":[]},{"Start":91308,"Length":2,"LineBreaks":[]},{"Start":91311,"Length":1,"LineBreaks":[]},{"Start":91315,"Length":1,"LineBreaks":[]},{"Start":91316,"Length":1,"LineBreaks":[]},{"Start":91317,"Length":3,"LineBreaks":[]},{"Start":91320,"Length":9,"LineBreaks":[]},{"Start":91329,"Length":1,"LineBreaks":[]},{"Start":91330,"Length":1,"LineBreaks":[]},{"Start":91331,"Length":1,"LineBreaks":[]},{"Start":91335,"Length":1,"LineBreaks":[]},{"Start":91336,"Length":1,"LineBreaks":[]},{"Start":91337,"Length":21,"LineBreaks":[]},{"Start":91360,"Length":1,"LineBreaks":[]},{"Start":91361,"Length":5,"LineBreaks":[]},{"Start":91366,"Length":1,"LineBreaks":[91366]},{"Start":91367,"Length":1,"LineBreaks":[91367]},{"Start":91368,"Length":8,"LineBreaks":[]},{"Start":91376,"Length":1,"LineBreaks":[]},{"Start":91377,"Length":1,"LineBreaks":[]},{"Start":91378,"Length":1,"LineBreaks":[]},{"Start":91381,"Length":1,"LineBreaks":[]},{"Start":91383,"Length":1,"LineBreaks":[]},{"Start":91417,"Length":2,"LineBreaks":[]},{"Start":91424,"Length":1,"LineBreaks":[]},{"Start":91425,"Length":1,"LineBreaks":[]},{"Start":91426,"Length":1,"LineBreaks":[]},{"Start":91427,"Length":1,"LineBreaks":[]},{"Start":91428,"Length":1,"LineBreaks":[]},{"Start":91429,"Length":1,"LineBreaks":[]},{"Start":91430,"Length":1,"LineBreaks":[]},{"Start":91431,"Length":1,"LineBreaks":[]},{"Start":91432,"Length":1,"LineBreaks":[]},{"Start":91434,"Length":1,"LineBreaks":[]},{"Start":91436,"Length":1,"LineBreaks":[]},{"Start":91437,"Length":1,"LineBreaks":[]},{"Start":91438,"Length":1,"LineBreaks":[]},{"Start":91439,"Length":1,"LineBreaks":[]},{"Start":91440,"Length":1,"LineBreaks":[]},{"Start":91441,"Length":1,"LineBreaks":[]},{"Start":91442,"Length":1,"LineBreaks":[]},{"Start":91443,"Length":1,"LineBreaks":[]},{"Start":91444,"Length":1,"LineBreaks":[]},{"Start":91445,"Length":1,"LineBreaks":[]},{"Start":91446,"Length":1,"LineBreaks":[]},{"Start":91447,"Length":1,"LineBreaks":[]},{"Start":91448,"Length":1,"LineBreaks":[]},{"Start":91449,"Length":1,"LineBreaks":[]},{"Start":91455,"Length":12,"LineBreaks":[]},{"Start":91467,"Length":1,"LineBreaks":[]},{"Start":91468,"Length":1,"LineBreaks":[]},{"Start":91469,"Length":2,"LineBreaks":[]},{"Start":91471,"Length":1,"LineBreaks":[]},{"Start":91472,"Length":1,"LineBreaks":[]},{"Start":91473,"Length":1,"LineBreaks":[]},{"Start":91474,"Length":1,"LineBreaks":[]},{"Start":91475,"Length":1,"LineBreaks":[]},{"Start":91476,"Length":1,"LineBreaks":[]},{"Start":91477,"Length":1,"LineBreaks":[]},{"Start":91478,"Length":1,"LineBreaks":[]},{"Start":91479,"Length":1,"LineBreaks":[]},{"Start":91480,"Length":1,"LineBreaks":[]},{"Start":91486,"Length":1,"LineBreaks":[]},{"Start":91487,"Length":2,"LineBreaks":[]},{"Start":91492,"Length":1,"LineBreaks":[]},{"Start":91493,"Length":1,"LineBreaks":[]},{"Start":91495,"Length":1,"LineBreaks":[]},{"Start":91496,"Length":1,"LineBreaks":[]},{"Start":91497,"Length":1,"LineBreaks":[]},{"Start":91498,"Length":2,"LineBreaks":[91498]},{"Start":91500,"Length":1,"LineBreaks":[]},{"Start":91501,"Length":1,"LineBreaks":[]},{"Start":91502,"Length":1,"LineBreaks":[]},{"Start":91503,"Length":1,"LineBreaks":[]},{"Start":91504,"Length":1,"LineBreaks":[]},{"Start":91505,"Length":1,"LineBreaks":[]},{"Start":91506,"Length":1,"LineBreaks":[]},{"Start":91507,"Length":1,"LineBreaks":[]},{"Start":91508,"Length":1,"LineBreaks":[]},{"Start":91509,"Length":1,"LineBreaks":[]},{"Start":91510,"Length":1,"LineBreaks":[]},{"Start":91511,"Length":1,"LineBreaks":[]},{"Start":91512,"Length":1,"LineBreaks":[]},{"Start":91513,"Length":2,"LineBreaks":[]},{"Start":91521,"Length":1,"LineBreaks":[]},{"Start":91522,"Length":1,"LineBreaks":[]},{"Start":91524,"Length":1,"LineBreaks":[]},{"Start":91525,"Length":1,"LineBreaks":[]},{"Start":91526,"Length":1,"LineBreaks":[]},{"Start":91528,"Length":1,"LineBreaks":[]},{"Start":91529,"Length":1,"LineBreaks":[]},{"Start":91530,"Length":1,"LineBreaks":[]},{"Start":91532,"Length":1,"LineBreaks":[]},{"Start":91533,"Length":6,"LineBreaks":[]},{"Start":91540,"Length":2,"LineBreaks":[91540]},{"Start":91542,"Length":1,"LineBreaks":[]},{"Start":91543,"Length":1,"LineBreaks":[]},{"Start":91544,"Length":1,"LineBreaks":[]},{"Start":91545,"Length":1,"LineBreaks":[]},{"Start":91546,"Length":1,"LineBreaks":[]},{"Start":91547,"Length":1,"LineBreaks":[]},{"Start":91548,"Length":1,"LineBreaks":[]},{"Start":91549,"Length":1,"LineBreaks":[]},{"Start":91550,"Length":1,"LineBreaks":[]},{"Start":91551,"Length":1,"LineBreaks":[]},{"Start":91552,"Length":2,"LineBreaks":[]},{"Start":91554,"Length":1,"LineBreaks":[]},{"Start":91555,"Length":1,"LineBreaks":[]},{"Start":91556,"Length":1,"LineBreaks":[]},{"Start":91557,"Length":1,"LineBreaks":[]},{"Start":91558,"Length":1,"LineBreaks":[]},{"Start":91559,"Length":1,"LineBreaks":[]},{"Start":91560,"Length":1,"LineBreaks":[]},{"Start":91561,"Length":1,"LineBreaks":[]},{"Start":91562,"Length":1,"LineBreaks":[]},{"Start":91563,"Length":1,"LineBreaks":[]},{"Start":91564,"Length":1,"LineBreaks":[]},{"Start":91569,"Length":11,"LineBreaks":[]},{"Start":91580,"Length":1,"LineBreaks":[]},{"Start":91581,"Length":4,"LineBreaks":[]},{"Start":91585,"Length":1,"LineBreaks":[]},{"Start":91592,"Length":1,"LineBreaks":[91592]},{"Start":91594,"Length":1,"LineBreaks":[91594]},{"Start":91595,"Length":1,"LineBreaks":[91595]},{"Start":91596,"Length":1,"LineBreaks":[91596]},{"Start":91598,"Length":23,"LineBreaks":[91620]},{"Start":91622,"Length":1,"LineBreaks":[91622]},{"Start":91624,"Length":23,"LineBreaks":[]},{"Start":91647,"Length":1,"LineBreaks":[91647]},{"Start":91649,"Length":1,"LineBreaks":[]},{"Start":91650,"Length":20,"LineBreaks":[91669]},{"Start":91671,"Length":1,"LineBreaks":[]},{"Start":91672,"Length":14,"LineBreaks":[]},{"Start":91686,"Length":1,"LineBreaks":[]},{"Start":91688,"Length":1,"LineBreaks":[]},{"Start":91690,"Length":6,"LineBreaks":[]},{"Start":91696,"Length":16,"LineBreaks":[91711]},{"Start":91713,"Length":1,"LineBreaks":[]},{"Start":91714,"Length":14,"LineBreaks":[]},{"Start":91810,"Length":1,"LineBreaks":[91810]},{"Start":91812,"Length":22,"LineBreaks":[]},{"Start":91834,"Length":1,"LineBreaks":[91834]},{"Start":91836,"Length":38,"LineBreaks":[91873]},{"Start":91875,"Length":4,"LineBreaks":[91878]},{"Start":91880,"Length":3,"LineBreaks":[91882]},{"Start":91884,"Length":2,"LineBreaks":[]},{"Start":91887,"Length":19,"LineBreaks":[]},{"Start":91907,"Length":3,"LineBreaks":[]},{"Start":91912,"Length":1,"LineBreaks":[]},{"Start":91917,"Length":14,"LineBreaks":[]},{"Start":91933,"Length":3,"LineBreaks":[]},{"Start":91937,"Length":14,"LineBreaks":[]},{"Start":91952,"Length":2,"LineBreaks":[91953]},{"Start":91955,"Length":25,"LineBreaks":[]},{"Start":91982,"Length":1,"LineBreaks":[91982]},{"Start":91995,"Length":1,"LineBreaks":[]},{"Start":91998,"Length":18,"LineBreaks":[]},{"Start":92016,"Length":1,"LineBreaks":[]},{"Start":92017,"Length":2,"LineBreaks":[92017]},{"Start":92019,"Length":1,"LineBreaks":[]},{"Start":92020,"Length":1,"LineBreaks":[]},{"Start":92021,"Length":1,"LineBreaks":[]},{"Start":92022,"Length":1,"LineBreaks":[]},{"Start":92023,"Length":1,"LineBreaks":[]},{"Start":92024,"Length":1,"LineBreaks":[]},{"Start":92029,"Length":1,"LineBreaks":[]},{"Start":92030,"Length":1,"LineBreaks":[]},{"Start":92031,"Length":1,"LineBreaks":[]},{"Start":92032,"Length":1,"LineBreaks":[]},{"Start":92033,"Length":1,"LineBreaks":[]},{"Start":92034,"Length":1,"LineBreaks":[]},{"Start":92035,"Length":1,"LineBreaks":[]},{"Start":92036,"Length":1,"LineBreaks":[]},{"Start":92037,"Length":1,"LineBreaks":[]},{"Start":92038,"Length":1,"LineBreaks":[]},{"Start":92039,"Length":1,"LineBreaks":[]},{"Start":92040,"Length":1,"LineBreaks":[]},{"Start":92041,"Length":2,"LineBreaks":[92041]},{"Start":92043,"Length":1,"LineBreaks":[]},{"Start":92044,"Length":1,"LineBreaks":[]},{"Start":92045,"Length":1,"LineBreaks":[]},{"Start":92046,"Length":1,"LineBreaks":[]},{"Start":92047,"Length":1,"LineBreaks":[]},{"Start":92048,"Length":1,"LineBreaks":[]},{"Start":92049,"Length":1,"LineBreaks":[]},{"Start":92050,"Length":1,"LineBreaks":[]},{"Start":92051,"Length":1,"LineBreaks":[]},{"Start":92052,"Length":1,"LineBreaks":[]},{"Start":92053,"Length":1,"LineBreaks":[]},{"Start":92054,"Length":1,"LineBreaks":[]},{"Start":92055,"Length":1,"LineBreaks":[]},{"Start":92060,"Length":8,"LineBreaks":[]},{"Start":92068,"Length":1,"LineBreaks":[]},{"Start":92069,"Length":1,"LineBreaks":[]},{"Start":92082,"Length":1,"LineBreaks":[]},{"Start":92090,"Length":1,"LineBreaks":[]},{"Start":92091,"Length":1,"LineBreaks":[]},{"Start":92092,"Length":1,"LineBreaks":[]},{"Start":92093,"Length":1,"LineBreaks":[]},{"Start":92094,"Length":1,"LineBreaks":[]},{"Start":92095,"Length":1,"LineBreaks":[]},{"Start":92096,"Length":1,"LineBreaks":[]},{"Start":92097,"Length":1,"LineBreaks":[]},{"Start":92098,"Length":1,"LineBreaks":[]},{"Start":92099,"Length":1,"LineBreaks":[]},{"Start":92100,"Length":1,"LineBreaks":[]},{"Start":92106,"Length":9,"LineBreaks":[]},{"Start":92115,"Length":1,"LineBreaks":[]},{"Start":92116,"Length":1,"LineBreaks":[]},{"Start":92117,"Length":1,"LineBreaks":[]},{"Start":92118,"Length":1,"LineBreaks":[]},{"Start":92119,"Length":1,"LineBreaks":[]},{"Start":92120,"Length":2,"LineBreaks":[92120]},{"Start":92122,"Length":1,"LineBreaks":[]},{"Start":92123,"Length":1,"LineBreaks":[]},{"Start":92124,"Length":1,"LineBreaks":[]},{"Start":92125,"Length":1,"LineBreaks":[]},{"Start":92126,"Length":1,"LineBreaks":[]},{"Start":92127,"Length":1,"LineBreaks":[]},{"Start":92128,"Length":1,"LineBreaks":[]},{"Start":92129,"Length":1,"LineBreaks":[]},{"Start":92130,"Length":1,"LineBreaks":[]},{"Start":92131,"Length":1,"LineBreaks":[]},{"Start":92132,"Length":1,"LineBreaks":[]},{"Start":92133,"Length":1,"LineBreaks":[]},{"Start":92134,"Length":1,"LineBreaks":[]},{"Start":92135,"Length":1,"LineBreaks":[]},{"Start":92136,"Length":1,"LineBreaks":[]},{"Start":92137,"Length":1,"LineBreaks":[]},{"Start":92156,"Length":1,"LineBreaks":[]},{"Start":92157,"Length":5,"LineBreaks":[]},{"Start":92166,"Length":1,"LineBreaks":[]},{"Start":92167,"Length":17,"LineBreaks":[]},{"Start":92190,"Length":6,"LineBreaks":[]},{"Start":92196,"Length":2,"LineBreaks":[]},{"Start":92198,"Length":1,"LineBreaks":[]},{"Start":92199,"Length":1,"LineBreaks":[]},{"Start":92200,"Length":1,"LineBreaks":[]},{"Start":92201,"Length":1,"LineBreaks":[]},{"Start":92202,"Length":1,"LineBreaks":[]},{"Start":92203,"Length":1,"LineBreaks":[]},{"Start":92204,"Length":1,"LineBreaks":[]},{"Start":92205,"Length":1,"LineBreaks":[]},{"Start":92206,"Length":1,"LineBreaks":[]},{"Start":92207,"Length":1,"LineBreaks":[]},{"Start":92212,"Length":2,"LineBreaks":[]},{"Start":92214,"Length":4,"LineBreaks":[]},{"Start":92221,"Length":1,"LineBreaks":[]},{"Start":92222,"Length":1,"LineBreaks":[]},{"Start":92223,"Length":1,"LineBreaks":[]},{"Start":92224,"Length":1,"LineBreaks":[]},{"Start":92225,"Length":1,"LineBreaks":[]},{"Start":92227,"Length":1,"LineBreaks":[92227]},{"Start":92239,"Length":4,"LineBreaks":[]},{"Start":92243,"Length":5,"LineBreaks":[]},{"Start":92248,"Length":2,"LineBreaks":[]},{"Start":92285,"Length":1,"LineBreaks":[]},{"Start":92363,"Length":1,"LineBreaks":[92362]},{"Start":92364,"Length":106,"LineBreaks":[92469]},{"Start":92470,"Length":15,"LineBreaks":[]},{"Start":92507,"Length":1,"LineBreaks":[]},{"Start":92508,"Length":1,"LineBreaks":[]},{"Start":92509,"Length":1,"LineBreaks":[]},{"Start":92510,"Length":1,"LineBreaks":[]},{"Start":92511,"Length":1,"LineBreaks":[]},{"Start":92512,"Length":1,"LineBreaks":[]},{"Start":92513,"Length":1,"LineBreaks":[]},{"Start":92514,"Length":1,"LineBreaks":[]},{"Start":92526,"Length":11,"LineBreaks":[]},{"Start":92537,"Length":1,"LineBreaks":[]},{"Start":92542,"Length":7,"LineBreaks":[]},{"Start":92549,"Length":1,"LineBreaks":[]},{"Start":92550,"Length":1,"LineBreaks":[]},{"Start":92551,"Length":1,"LineBreaks":[]},{"Start":92552,"Length":1,"LineBreaks":[]},{"Start":92553,"Length":1,"LineBreaks":[]},{"Start":92554,"Length":1,"LineBreaks":[]},{"Start":92555,"Length":1,"LineBreaks":[]},{"Start":92556,"Length":1,"LineBreaks":[]},{"Start":92557,"Length":1,"LineBreaks":[]},{"Start":92558,"Length":3,"LineBreaks":[]},{"Start":92561,"Length":3,"LineBreaks":[]},{"Start":92564,"Length":65,"LineBreaks":[]},{"Start":92629,"Length":1,"LineBreaks":[]},{"Start":92630,"Length":1,"LineBreaks":[]},{"Start":92631,"Length":1,"LineBreaks":[]},{"Start":92632,"Length":1,"LineBreaks":[]},{"Start":92633,"Length":1,"LineBreaks":[]},{"Start":92634,"Length":1,"LineBreaks":[]},{"Start":92635,"Length":1,"LineBreaks":[]},{"Start":92636,"Length":1,"LineBreaks":[]},{"Start":92637,"Length":1,"LineBreaks":[]},{"Start":92638,"Length":1,"LineBreaks":[]},{"Start":92639,"Length":1,"LineBreaks":[]},{"Start":92640,"Length":1,"LineBreaks":[]},{"Start":92641,"Length":1,"LineBreaks":[]},{"Start":92642,"Length":1,"LineBreaks":[]},{"Start":92643,"Length":1,"LineBreaks":[]},{"Start":92644,"Length":1,"LineBreaks":[]},{"Start":92645,"Length":1,"LineBreaks":[]},{"Start":92646,"Length":1,"LineBreaks":[]},{"Start":92647,"Length":1,"LineBreaks":[]},{"Start":92648,"Length":1,"LineBreaks":[]},{"Start":92649,"Length":1,"LineBreaks":[]},{"Start":92650,"Length":1,"LineBreaks":[]},{"Start":92651,"Length":1,"LineBreaks":[]},{"Start":92652,"Length":1,"LineBreaks":[]},{"Start":92653,"Length":1,"LineBreaks":[]},{"Start":92654,"Length":1,"LineBreaks":[]},{"Start":92655,"Length":1,"LineBreaks":[]},{"Start":92656,"Length":1,"LineBreaks":[]},{"Start":92657,"Length":20,"LineBreaks":[]},{"Start":92680,"Length":3,"LineBreaks":[]},{"Start":92683,"Length":3,"LineBreaks":[]},{"Start":92702,"Length":3,"LineBreaks":[]},{"Start":92941,"Length":10,"LineBreaks":[92941]},{"Start":92953,"Length":5,"LineBreaks":[92953]},{"Start":92961,"Length":30,"LineBreaks":[92961]},{"Start":92991,"Length":22,"LineBreaks":[92991]},{"Start":93017,"Length":10,"LineBreaks":[93017]},{"Start":93029,"Length":2,"LineBreaks":[93029]},{"Start":93042,"Length":13,"LineBreaks":[]},{"Start":93082,"Length":11,"LineBreaks":[]},{"Start":93097,"Length":11,"LineBreaks":[]},{"Start":93109,"Length":1,"LineBreaks":[]},{"Start":93110,"Length":7,"LineBreaks":[]},{"Start":93120,"Length":7,"LineBreaks":[]},{"Start":93143,"Length":6,"LineBreaks":[]},{"Start":93149,"Length":1,"LineBreaks":[]},{"Start":93151,"Length":1,"LineBreaks":[]},{"Start":93152,"Length":1,"LineBreaks":[]},{"Start":93153,"Length":1,"LineBreaks":[]},{"Start":93154,"Length":4,"LineBreaks":[]},{"Start":93168,"Length":11,"LineBreaks":[]},{"Start":93179,"Length":1,"LineBreaks":[]},{"Start":93180,"Length":1,"LineBreaks":[]},{"Start":93181,"Length":1,"LineBreaks":[]},{"Start":93182,"Length":1,"LineBreaks":[]},{"Start":93183,"Length":1,"LineBreaks":[]},{"Start":93184,"Length":1,"LineBreaks":[]},{"Start":93185,"Length":1,"LineBreaks":[]},{"Start":93197,"Length":22,"LineBreaks":[]},{"Start":93231,"Length":35,"LineBreaks":[93265]},{"Start":93272,"Length":1,"LineBreaks":[]},{"Start":93273,"Length":1,"LineBreaks":[]},{"Start":93274,"Length":1,"LineBreaks":[]},{"Start":93275,"Length":1,"LineBreaks":[]},{"Start":93276,"Length":1,"LineBreaks":[]},{"Start":93277,"Length":1,"LineBreaks":[]},{"Start":93278,"Length":1,"LineBreaks":[]},{"Start":93279,"Length":1,"LineBreaks":[]},{"Start":93280,"Length":1,"LineBreaks":[]},{"Start":93281,"Length":1,"LineBreaks":[]},{"Start":93282,"Length":1,"LineBreaks":[]},{"Start":93283,"Length":1,"LineBreaks":[]},{"Start":93284,"Length":1,"LineBreaks":[]},{"Start":93285,"Length":1,"LineBreaks":[]},{"Start":93286,"Length":1,"LineBreaks":[]},{"Start":93287,"Length":1,"LineBreaks":[]},{"Start":93322,"Length":1,"LineBreaks":[]},{"Start":93330,"Length":14,"LineBreaks":[]},{"Start":93344,"Length":6,"LineBreaks":[]},{"Start":93350,"Length":1,"LineBreaks":[]},{"Start":93367,"Length":21,"LineBreaks":[]},{"Start":93388,"Length":1,"LineBreaks":[]},{"Start":93389,"Length":1,"LineBreaks":[]},{"Start":93390,"Length":1,"LineBreaks":[]},{"Start":93391,"Length":1,"LineBreaks":[]},{"Start":93392,"Length":1,"LineBreaks":[]},{"Start":93393,"Length":1,"LineBreaks":[]},{"Start":93394,"Length":1,"LineBreaks":[]},{"Start":93395,"Length":1,"LineBreaks":[]},{"Start":93396,"Length":1,"LineBreaks":[]},{"Start":93397,"Length":1,"LineBreaks":[]},{"Start":93398,"Length":1,"LineBreaks":[]},{"Start":93399,"Length":1,"LineBreaks":[]},{"Start":93400,"Length":1,"LineBreaks":[]},{"Start":93401,"Length":1,"LineBreaks":[]},{"Start":93402,"Length":1,"LineBreaks":[]},{"Start":93403,"Length":1,"LineBreaks":[]},{"Start":93404,"Length":1,"LineBreaks":[]},{"Start":93405,"Length":1,"LineBreaks":[]},{"Start":93406,"Length":1,"LineBreaks":[]},{"Start":93407,"Length":4,"LineBreaks":[]},{"Start":93411,"Length":4,"LineBreaks":[]},{"Start":93443,"Length":14,"LineBreaks":[]},{"Start":93457,"Length":14,"LineBreaks":[]},{"Start":93471,"Length":1,"LineBreaks":[]},{"Start":93472,"Length":1,"LineBreaks":[]},{"Start":93473,"Length":1,"LineBreaks":[]},{"Start":93474,"Length":1,"LineBreaks":[]},{"Start":93475,"Length":1,"LineBreaks":[]},{"Start":93476,"Length":1,"LineBreaks":[]},{"Start":93477,"Length":1,"LineBreaks":[]},{"Start":93478,"Length":1,"LineBreaks":[]},{"Start":93479,"Length":1,"LineBreaks":[]},{"Start":93480,"Length":1,"LineBreaks":[]},{"Start":93481,"Length":1,"LineBreaks":[]},{"Start":93482,"Length":1,"LineBreaks":[]},{"Start":93483,"Length":1,"LineBreaks":[]},{"Start":93484,"Length":1,"LineBreaks":[]},{"Start":93505,"Length":12,"LineBreaks":[]},{"Start":93517,"Length":12,"LineBreaks":[]},{"Start":93529,"Length":57,"LineBreaks":[]},{"Start":93587,"Length":4,"LineBreaks":[]},{"Start":93592,"Length":1,"LineBreaks":[]},{"Start":93593,"Length":1,"LineBreaks":[]},{"Start":93594,"Length":1,"LineBreaks":[]},{"Start":93595,"Length":1,"LineBreaks":[]},{"Start":93596,"Length":1,"LineBreaks":[]},{"Start":93597,"Length":1,"LineBreaks":[]},{"Start":93598,"Length":1,"LineBreaks":[]},{"Start":93599,"Length":1,"LineBreaks":[]},{"Start":93600,"Length":1,"LineBreaks":[]},{"Start":93602,"Length":1,"LineBreaks":[]},{"Start":93603,"Length":1,"LineBreaks":[]},{"Start":93604,"Length":1,"LineBreaks":[]},{"Start":93605,"Length":1,"LineBreaks":[]},{"Start":93606,"Length":1,"LineBreaks":[]},{"Start":93607,"Length":1,"LineBreaks":[]},{"Start":93608,"Length":1,"LineBreaks":[]},{"Start":93609,"Length":1,"LineBreaks":[]},{"Start":93610,"Length":1,"LineBreaks":[]},{"Start":93611,"Length":1,"LineBreaks":[]},{"Start":93612,"Length":1,"LineBreaks":[]},{"Start":93613,"Length":1,"LineBreaks":[]},{"Start":93614,"Length":1,"LineBreaks":[]},{"Start":93615,"Length":1,"LineBreaks":[]},{"Start":93616,"Length":1,"LineBreaks":[]},{"Start":93617,"Length":1,"LineBreaks":[]},{"Start":93618,"Length":1,"LineBreaks":[]},{"Start":93619,"Length":1,"LineBreaks":[]},{"Start":93620,"Length":1,"LineBreaks":[]},{"Start":93621,"Length":1,"LineBreaks":[]},{"Start":93622,"Length":1,"LineBreaks":[]},{"Start":93623,"Length":1,"LineBreaks":[]},{"Start":93624,"Length":1,"LineBreaks":[]},{"Start":93625,"Length":1,"LineBreaks":[]},{"Start":93626,"Length":1,"LineBreaks":[]},{"Start":93627,"Length":1,"LineBreaks":[]},{"Start":93628,"Length":1,"LineBreaks":[]},{"Start":93629,"Length":1,"LineBreaks":[]},{"Start":93630,"Length":1,"LineBreaks":[]},{"Start":93631,"Length":1,"LineBreaks":[]},{"Start":93632,"Length":1,"LineBreaks":[]},{"Start":93633,"Length":1,"LineBreaks":[]},{"Start":93634,"Length":1,"LineBreaks":[]},{"Start":93635,"Length":1,"LineBreaks":[]},{"Start":93637,"Length":1,"LineBreaks":[]},{"Start":93638,"Length":1,"LineBreaks":[]},{"Start":93639,"Length":1,"LineBreaks":[]},{"Start":93640,"Length":1,"LineBreaks":[]},{"Start":93641,"Length":1,"LineBreaks":[]},{"Start":93642,"Length":1,"LineBreaks":[]},{"Start":93643,"Length":1,"LineBreaks":[]},{"Start":93644,"Length":1,"LineBreaks":[]},{"Start":93645,"Length":1,"LineBreaks":[]},{"Start":93646,"Length":1,"LineBreaks":[]},{"Start":93647,"Length":1,"LineBreaks":[]},{"Start":93648,"Length":1,"LineBreaks":[]},{"Start":93649,"Length":1,"LineBreaks":[]},{"Start":93650,"Length":1,"LineBreaks":[]},{"Start":93651,"Length":1,"LineBreaks":[]},{"Start":93652,"Length":1,"LineBreaks":[]},{"Start":93653,"Length":1,"LineBreaks":[]},{"Start":93654,"Length":1,"LineBreaks":[]},{"Start":93655,"Length":1,"LineBreaks":[]},{"Start":93656,"Length":1,"LineBreaks":[]},{"Start":93657,"Length":1,"LineBreaks":[]},{"Start":93658,"Length":1,"LineBreaks":[]},{"Start":93659,"Length":1,"LineBreaks":[]},{"Start":93660,"Length":1,"LineBreaks":[]},{"Start":93661,"Length":1,"LineBreaks":[]},{"Start":93662,"Length":1,"LineBreaks":[]},{"Start":93663,"Length":1,"LineBreaks":[]},{"Start":93664,"Length":1,"LineBreaks":[]},{"Start":93665,"Length":1,"LineBreaks":[]},{"Start":93666,"Length":1,"LineBreaks":[]},{"Start":93667,"Length":1,"LineBreaks":[]},{"Start":93668,"Length":1,"LineBreaks":[]},{"Start":93669,"Length":1,"LineBreaks":[]},{"Start":93670,"Length":1,"LineBreaks":[]},{"Start":93671,"Length":1,"LineBreaks":[]},{"Start":93672,"Length":1,"LineBreaks":[]},{"Start":93673,"Length":1,"LineBreaks":[]},{"Start":93674,"Length":1,"LineBreaks":[]},{"Start":93675,"Length":1,"LineBreaks":[]},{"Start":93676,"Length":1,"LineBreaks":[]},{"Start":93677,"Length":1,"LineBreaks":[]},{"Start":93678,"Length":1,"LineBreaks":[]},{"Start":93679,"Length":1,"LineBreaks":[]},{"Start":93680,"Length":1,"LineBreaks":[]},{"Start":93681,"Length":1,"LineBreaks":[]},{"Start":93682,"Length":1,"LineBreaks":[]},{"Start":93683,"Length":2,"LineBreaks":[93683]},{"Start":93685,"Length":8,"LineBreaks":[]},{"Start":93693,"Length":2,"LineBreaks":[93693]},{"Start":93695,"Length":3,"LineBreaks":[]},{"Start":93699,"Length":1,"LineBreaks":[]},{"Start":93700,"Length":2,"LineBreaks":[93700]},{"Start":93702,"Length":1,"LineBreaks":[]},{"Start":93703,"Length":1,"LineBreaks":[]},{"Start":93704,"Length":1,"LineBreaks":[]},{"Start":93715,"Length":2,"LineBreaks":[93715]},{"Start":93717,"Length":1,"LineBreaks":[]},{"Start":93718,"Length":1,"LineBreaks":[]},{"Start":93719,"Length":1,"LineBreaks":[]},{"Start":93720,"Length":1,"LineBreaks":[]},{"Start":93721,"Length":1,"LineBreaks":[]},{"Start":93722,"Length":1,"LineBreaks":[]},{"Start":93723,"Length":1,"LineBreaks":[]},{"Start":93724,"Length":1,"LineBreaks":[]},{"Start":93725,"Length":1,"LineBreaks":[]},{"Start":93726,"Length":1,"LineBreaks":[]},{"Start":93727,"Length":1,"LineBreaks":[]},{"Start":93729,"Length":1,"LineBreaks":[]},{"Start":93730,"Length":1,"LineBreaks":[]},{"Start":93731,"Length":1,"LineBreaks":[]},{"Start":93732,"Length":1,"LineBreaks":[]},{"Start":93737,"Length":1,"LineBreaks":[]},{"Start":93750,"Length":8,"LineBreaks":[]},{"Start":93760,"Length":1,"LineBreaks":[]},{"Start":93761,"Length":1,"LineBreaks":[]},{"Start":93762,"Length":5,"LineBreaks":[]},{"Start":93767,"Length":1,"LineBreaks":[]},{"Start":93768,"Length":1,"LineBreaks":[]},{"Start":93769,"Length":1,"LineBreaks":[]},{"Start":93770,"Length":1,"LineBreaks":[]},{"Start":93771,"Length":1,"LineBreaks":[]},{"Start":93772,"Length":1,"LineBreaks":[]},{"Start":93773,"Length":1,"LineBreaks":[]},{"Start":93774,"Length":1,"LineBreaks":[]},{"Start":93775,"Length":1,"LineBreaks":[]},{"Start":93776,"Length":1,"LineBreaks":[]},{"Start":93777,"Length":1,"LineBreaks":[]},{"Start":93778,"Length":1,"LineBreaks":[]},{"Start":93779,"Length":6,"LineBreaks":[]},{"Start":93791,"Length":3,"LineBreaks":[]},{"Start":93794,"Length":3,"LineBreaks":[]},{"Start":93800,"Length":1,"LineBreaks":[]},{"Start":93801,"Length":1,"LineBreaks":[]},{"Start":93802,"Length":5,"LineBreaks":[]},{"Start":93811,"Length":1,"LineBreaks":[]},{"Start":93812,"Length":1,"LineBreaks":[]},{"Start":93813,"Length":1,"LineBreaks":[]},{"Start":93814,"Length":1,"LineBreaks":[]},{"Start":93815,"Length":1,"LineBreaks":[]},{"Start":93816,"Length":1,"LineBreaks":[]},{"Start":93817,"Length":1,"LineBreaks":[]},{"Start":93818,"Length":1,"LineBreaks":[]},{"Start":93819,"Length":1,"LineBreaks":[]},{"Start":93820,"Length":1,"LineBreaks":[]},{"Start":93821,"Length":1,"LineBreaks":[]},{"Start":93822,"Length":1,"LineBreaks":[]},{"Start":93923,"Length":61,"LineBreaks":[93923,93950,93982]}],"Current":[169,225,170,171,226,172,314,173,263,265,266,267,264,174,268,269,270,271,175,667,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,671,695,697,699,701,703,705,707,709,711,713,715,717,719,721,672,673,674,675,676,668,677,723,678,693,680,681,682,683,684,685,686,687,688,689,690,691,679,669,692,670,176,965,177,535,536,537,538,539,815,908,909,910,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,911,912,913,914,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,540,541,725,542,543,724,544,736,754,737,756,758,760,762,764,766,768,770,738,755,757,759,761,763,765,767,769,739,740,741,742,743,545,546,735,547,771,772,773,548,549,726,550,774,776,775,732,734,733,731,730,744,745,746,747,748,749,750,751,752,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,729,728,727,551,552,753,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,553,554,555,556,557,558,559,560,561,619,620,621,622,623,562,563,564,565,966,566,534,641,642,643,644,645,646,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,365,366,367,368,369,370,371,647,648,649,650,651,652,653,654,655,656,361,362,363,364,372,315,395,396,397,398,399,400,401,402,316,403,404,317,318,319,320,321,322,394,323,324,325,326,405,406,327,408,409,328,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,407,393,178,272,273,274,275,179,249,180,293,290,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,250,251,252,253,254,256,257,255,294,291,295,297,304,305,410,306,411,307,296,292,298,299,301,300,302,303,181,533,182,186,954,955,956,957,958,959,960,961,962,963,964,187,209,210,188,189,190,191,664,192,666,193,658,659,660,661,662,663,194,665,195,567,569,568,413,576,414,578,580,582,584,586,588,416,417,419,418,606,607,608,609,610,611,612,613,614,615,616,618,617,415,423,424,425,426,420,421,577,579,581,583,585,587,422,570,571,572,573,574,575,412,196,197,198,259,276,260,278,261,277,262,258,199,211,200,201,428,430,429,431,432,624,625,626,627,628,629,630,631,632,633,634,635,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,932,474,475,952,953,476,477,636,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,504,505,496,497,637,638,639,498,499,500,640,501,502,503,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,531,530,532,915,916,917,918,919,920,921,922,923,924,925,926,930,931,927,928,929,433,434,427,202,279,203,280,281,282,283,936,937,938,939,940,941,942,943,944,945,946,947,224,204,284,933,285,657,934,935,286,308,309,311,313,312,310,287,288,289,205,950,206,220,221,207,949,212,948,213,216,219,217,222,223,951,218,214,215,208,183,184,185,4,5,6,7,8,9,10,11,12,13,17,18,108,14,15,16,41,42,43,44,45,46,47,48,49,50,51,52,58,53,54,55,56,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,160,162,161,95,116,117,118,119,120,121,124,125,131,122,126,127,128,129,130,123,2,3,166,132,133,134,151,152,153,154,155,156,157,158,159,135,136,137,138,139,140,163,164,165,141,142,143,148,146,149,150,147,144,145,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,60,61,62,63,64,65,66,67,68,69,70,74,75,71,72,73,96,97,98,99,100,101,102,103,167,104,105,106,107,109,110,115,111,112,113,168,114,22,23,1,0,907],"UndoStack":[],"RedoStack":[]}